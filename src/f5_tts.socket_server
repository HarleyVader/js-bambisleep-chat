import socket
import json
import sys
import argparse
import os
import wave
from io import BytesIO
from datetime import datetime

def send_tts_request(host="127.0.0.1", port=9000, text="Hello world", output_file=None, speaker_id=None):
    """Send a text-to-speech request to the F5-TTS server and save the result to a file."""
    
    if output_file is None:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"f5tts_output_{timestamp}.wav"
    
    print(f"Connecting to F5-TTS server at {host}:{port}")
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client.connect((host, port))
        
        # Prepare request
        request = {
            "text": text,
            "streaming": False
        }
        if speaker_id is not None:
            request["speaker_id"] = speaker_id
        
        # Send request
        print(f"Sending text: '{text}'")
        client.sendall(json.dumps(request).encode() + b"\n")
        
        # Receive audio data
        print("Receiving audio data...")
        audio_data = b""
        while True:
            chunk = client.recv(4096)
            if not chunk:
                break
            audio_data += chunk
        
        if not audio_data:
            print("Error: No audio data received")
            return False
            
        print(f"Received {len(audio_data)} bytes of audio data")
        
        # Save to WAV file
        with open(output_file, "wb") as f:
            wav_io = BytesIO()
            with wave.open(wav_io, "wb") as wav_file:
                wav_file.setnchannels(1)
                wav_file.setsampwidth(2)
                wav_file.setframerate(24000)
                wav_file.writeframes(audio_data)
            f.write(wav_io.getvalue())
        
        print(f"âœ“ Audio saved to: {os.path.abspath(output_file)}")
        print("  You can play this file using your Windows media player")
        return True
        
    except ConnectionRefusedError:
        print("Error: Connection refused. Is the F5-TTS server running?")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        client.close()
    
    return False

def main():
    parser = argparse.ArgumentParser(description="F5-TTS Client (File Output)")
    parser.add_argument("--host", default="127.0.0.1", help="Server host address")
    parser.add_argument("--port", type=int, default=9000, help="Server port")
    parser.add_argument("--text", required=True, help="Text to synthesize")
    parser.add_argument("--output", help="Output WAV file path")
    parser.add_argument("--speaker_id", help="Speaker ID (optional)")
    args = parser.parse_args()
    
    send_tts_request(args.host, args.port, args.text, args.output, args.speaker_id)

if __name__ == "__main__":
    main()