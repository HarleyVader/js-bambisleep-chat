<% 
// Default values if profile is not provided
const userLevel = profile ? profile.level || 0 : 0;
const userXp = profile ? profile.xp || 0 : 0;

// Define XP requirements for each level
const xpRequirements = [1000, 2500, 7500, 17000, 42000];

// Calculate next level XP requirement
const getNextLevelXP = (level) => {
  if (level < xpRequirements.length) {
    return xpRequirements[level];
  } else {
    return null;
  }
};

const nextLevelXP = userLevel < xpRequirements.length ? getNextLevelXP(userLevel) : null;
const systemControls = profile && profile.systemControls ? profile.systemControls : {};
%>

<div class="system-controls">
  <!-- Control buttons section -->
  <div id="buttons" class="control-buttons">
    <!-- Show triggers button only if level â‰¥ 1 -->
    <% if (userLevel >= 1) { %>
      <button id="triggers-btn" class="control-btn active" data-target="trigger-panel">Triggers</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 1 to unlock">Triggers ðŸ”’</button>
    <% } %>
    
    <!-- Show collar feature if user level â‰¥ 2 -->
    <% if (userLevel >= 2) { %>
      <button id="collar-btn" class="control-btn" data-target="collar-panel">Collar</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 2 to unlock">Collar ðŸ”’</button>
    <% } %>
    
    <!-- Show session history feature if user level â‰¥ 3 -->
    <% if (userLevel >= 3) { %>
      <button id="session-history-btn" class="control-btn" data-target="session-history-panel">Session History</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 3 to unlock">Session History ðŸ”’</button>
    <% } %>
    
    <!-- Show spirals feature if user level â‰¥ 4 -->
    <% if (userLevel >= 4) { %>
      <button id="spirals-btn" class="control-btn" data-target="spirals-panel">Spirals</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 4 to unlock">Spirals ðŸ”’</button>
    <% } %>
    
    <!-- Show hypnosis feature if user level â‰¥ 5 -->
    <% if (userLevel >= 5) { %>
      <button id="hypnosis-btn" class="control-btn" data-target="hypnosis-panel">Hypnosis</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 5 to unlock">Hypnosis ðŸ”’</button>
    <% } %>
    
    <!-- Show audios feature if user level â‰¥ 6 -->
    <% if (userLevel >= 6) { %>
      <button id="audios-btn" class="control-btn" data-target="audios-panel">Audios</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 6 to unlock">Audios ðŸ”’</button>
    <% } %>

    <!-- Show brainwave feature if user level â‰¥ 7 -->
    <% if (userLevel >= 7) { %>
      <button id="brainwave-btn" class="control-btn" data-target="brainwave-panel">Brainwaves</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 7 to unlock">Brainwaves ðŸ”’</button>
    <% } %>
    
    <!-- Show advanced binaural feature if user level â‰¥ 8 -->
    <% if (userLevel >= 8) { %>
      <button id="advanced-binaural-btn" class="control-btn" data-target="advanced-binaural-panel">Advanced Binaural</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 8 to unlock">Advanced Binaural ðŸ”’</button>
    <% } %>
  </div>

  <!-- Control panels section -->
  <div id="console" class="control-panels">
    <% if (userLevel >= 1) { %>
      <!-- Trigger panel -->
      <div id="trigger-panel" class="control-panel active">
        <h3>Trigger Toggles</h3>
        <div class="trigger-actions">
          <button id="activate-all" class="secondary-btn">Toggle All</button>
          <button id="play-triggers" class="btn btn-accent">
            <i class="fas fa-play"></i> Play Triggers
          </button>
        </div>
        <div id="trigger-list" class="trigger-grid"></div>
      </div>
      
      <% if (userLevel >= 2) { %>
        <!-- Collar panel -->
        <div id="collar-panel" class="control-panel">
          <h3>Collar Control</h3>
          <div id="collar-form-inputs">
            <div class="collar-toggle">
              <input type="checkbox" id="collar-enable" <%= systemControls.collarEnabled ? 'checked' : '' %>>
              <label for="collar-enable">Enable Collar</label>
            </div>
            <textarea id="textarea-collar" placeholder="Enter collar instructions..."><%= systemControls.collarText || '' %></textarea>
            <button id="save-collar" class="save-btn">Save Collar Settings</button>
          </div>
          <div class="collar-messages"></div>
        </div>
      <% } %>
      
      <% if (userLevel >= 3) { %>
        <!-- Session history panel -->
        <div id="session-history-panel" class="control-panel">
          <h3>Session History</h3>
          
          <div id="session-history-status" class="session-history-status">
            Click "Load History" to view your sessions
          </div>
          
          <div class="session-select-container" style="display: none">
            <select id="session-select">
              <option value="">Select a session...</option>
            </select>
            <div id="active-session-info" class="active-session-info" style="display: none">
              <span class="info-label">Active Session:</span>
              <span id="active-session-date">None</span>
            </div>
          </div>
          
          <div class="session-stats-container" style="display: none">
            <div class="session-stat">
              <div class="stat-value" id="session-count">0</div>
              <div class="stat-label">Sessions</div>
            </div>
            <div class="session-stat">
              <div class="stat-value" id="message-count">0</div>
              <div class="stat-label">Messages</div>
            </div>
            <div class="session-stat">
              <div class="stat-value" id="word-count">0</div>
              <div class="stat-label">Words</div>
            </div>
          </div>
          
          <div class="session-history-actions">
            <button id="load-history-btn" class="control-btn">Load History</button>
            <button id="replay-history-btn" class="control-btn" disabled>Replay Random</button>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 4) { %>
        <!-- Spirals panel -->
        <div id="spirals-panel" class="control-panel">
          <h3>Spirals Settings</h3>
          <div class="spirals-toggle">
            <input type="checkbox" id="spirals-enable" <%= systemControls.spiralsEnabled ? 'checked' : '' %>>
            <label for="spirals-enable">Enable Spirals</label>
          </div>
          
          <div class="spirals-controls">
            <div class="spiral-control-group">
              <label>Purple Spiral Width:</label>
              <div class="slider-container">
                <input type="range" id="spiral1-width" min="1" max="10" value="<%= systemControls.spiral1Width || 5.0 %>" step="0.5" class="spiral-slider">
                <span id="spiral1-width-value"><%= systemControls.spiral1Width || 5.0 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Pink Spiral Width:</label>
              <div class="slider-container">
                <input type="range" id="spiral2-width" min="1" max="10" value="<%= systemControls.spiral2Width || 3.0 %>" step="0.5" class="spiral-slider">
                <span id="spiral2-width-value"><%= systemControls.spiral2Width || 3.0 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Purple Spiral Speed:</label>
              <div class="slider-container">
                <input type="range" id="spiral1-speed" min="5" max="40" value="<%= systemControls.spiral1Speed || 20 %>" step="1" class="spiral-slider">
                <span id="spiral1-speed-value"><%= systemControls.spiral1Speed || 20 %></span>
              </div>
            </div>
            
            <div class="spiral-control-group">
              <label>Pink Spiral Speed:</label>
              <div class="slider-container">
                <input type="range" id="spiral2-speed" min="5" max="40" value="<%= systemControls.spiral2Speed || 15 %>" step="1" class="spiral-slider">
                <span id="spiral2-speed-value"><%= systemControls.spiral2Speed || 15 %></span>
              </div>
            </div>
          </div>
          
          <div class="spirals-actions">
            <button id="save-spirals" class="save-btn">Save Spiral Settings</button>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 5) { %>        <!-- Hypnosis panel -->
        <div id="hypnosis-panel" class="control-panel">
          <h3>Hypnosis Settings</h3>
          <div class="hypnosis-toggle">
            <input type="checkbox" id="hypnosis-enable" <%= systemControls.hypnosisEnabled ? 'checked' : '' %>>
            <label for="hypnosis-enable">Enable Hypnosis</label>
          </div>
          <div class="hypnosis-settings">
            <!-- Hypnosis settings would go here -->
            <p>Hypnosis settings will appear here in a future update.</p>
          </div>
          
          <!-- Streaming response settings -->
          <div class="streaming-settings">
            <h4>Response Streaming</h4>
            <div class="streaming-toggle">
              <input type="checkbox" id="streaming-enable" <%= systemControls.useStreaming ? 'checked' : '' %>>
              <label for="streaming-enable">Enable streaming responses</label>
            </div>
            <p class="setting-description">Streaming responses appear word by word in real-time, creating a more hypnotic effect.</p>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 6) { %>
        <!-- Audio panel -->
        <div id="audios-panel" class="control-panel">
          <h3>Trigger Audios</h3>
          <div class="playlist-actions">
            <button id="play-playlist" class="secondary-btn">Play Random Playlist</button>
            <div class="trigger-toggle-item">
              <input type="checkbox" id="loop-toggle" class="toggle-input">
              <label for="loop-toggle" class="toggle-label">Continuous Loop</label>
            </div>
          </div>
          
          <div class="audio-controls">
            <div class="audio-speed-control">
              <label for="loop-speed">Speed:</label>
              <input type="range" id="loop-speed" min="1" max="10" value="5" class="speed-slider">
              <span id="speed-value">Normal</span>
            </div>
            
            <div class="audio-volume-control">
              <label for="loop-volume">Volume:</label>
              <input type="range" id="loop-volume" min="0" max="10" value="8" class="volume-slider">
              <span id="volume-value">80%</span>
            </div>
          </div>
        </div>
      <% } %>

      <% if (userLevel >= 7) { %>
        <!-- Brainwave panel -->
        <div id="brainwave-panel" class="control-panel">
          <h3>Brainwave Entrainment</h3>
          <div class="brainwave-toggle">
            <input type="checkbox" id="brainwave-enable" <%= systemControls.brainwaveEnabled ? 'checked' : '' %>>
            <label for="brainwave-enable">Enable Binaural Beats</label>
          </div>
          
          <div class="brainwave-controls">
            <div class="brainwave-control-group">
              <label for="brainwave-mode">Frequency Mode:</label>
              <select id="brainwave-mode" class="brainwave-select">
                <option value="alpha" <%= (systemControls.brainwaveMode === 'alpha') ? 'selected' : '' %>>Alpha (10Hz) - Relaxed Focus</option>
                <option value="theta" <%= (systemControls.brainwaveMode === 'theta') ? 'selected' : '' %>>Theta (6Hz) - Deep Trance</option>
                <option value="delta" <%= (systemControls.brainwaveMode === 'delta') ? 'selected' : '' %>>Delta (2Hz) - Sleep State</option>
                <option value="beta" <%= (systemControls.brainwaveMode === 'beta') ? 'selected' : '' %>>Beta (20Hz) - Alert State</option>
                <option value="custom" <%= (systemControls.brainwaveMode === 'custom') ? 'selected' : '' %>>Custom Frequency</option>
              </select>
            </div>
            
            <div id="frequency-description" class="frequency-description">
              Alpha waves (8-14Hz) promote relaxed focus and are ideal for gentle trance states.
            </div>
            
            <div id="custom-freq-container" class="brainwave-control-group" style="<%= (systemControls.brainwaveMode === 'custom') ? '' : 'display: none' %>">
              <label for="custom-frequency">Beat Frequency:</label>
              <div class="slider-container">
                <input type="range" id="custom-frequency" min="1" max="30" value="<%= systemControls.customFrequency || 10 %>" step="0.5" class="brainwave-slider">
                <span id="custom-frequency-value"><%= systemControls.customFrequency || 10 %> Hz</span>
              </div>
            </div>
            
            <div class="brainwave-control-group">
              <label for="carrier-frequency">Carrier Frequency:</label>
              <div class="slider-container">
                <input type="range" id="carrier-frequency" min="100" max="500" value="<%= systemControls.carrierFrequency || 200 %>" step="10" class="brainwave-slider">
                <span id="carrier-frequency-value"><%= systemControls.carrierFrequency || 200 %> Hz</span>
              </div>
            </div>
            
            <div class="brainwave-control-group">
              <label for="brainwave-volume">Volume:</label>
              <div class="slider-container">
                <input type="range" id="brainwave-volume" min="0" max="100" value="<%= systemControls.brainwaveVolume || 50 %>" step="1" class="brainwave-slider">
                <span id="brainwave-volume-value"><%= systemControls.brainwaveVolume || 50 %>%</span>
              </div>
            </div>
          </div>
          
          <div class="brainwave-actions">
            <button id="play-brainwave" class="secondary-btn">Play Binaural Beat</button>
            <button id="stop-brainwave" class="secondary-btn" disabled>Stop</button>
            <button id="save-brainwave" class="save-btn">Save Settings</button>
          </div>
        </div>
      <% } %>
      
        <% if (userLevel >= 8) { %>
        <!-- Advanced Binaural panel -->
        <div id="advanced-binaural-panel" class="control-panel">
          <h3>Advanced Binaural Patterns</h3>
          <div class="advanced-binaural-info">
            <p>This advanced feature allows more complex brainwave entrainment patterns that change over time.</p>
            <div class="science-reference">
              <i class="fas fa-flask"></i> Based on recent neuroscience research on frequency-following response.
              <a href="#" id="science-link" class="info-link">Learn more</a>
            </div>
          </div>
          
          <div class="binaural-toggle">
            <input type="checkbox" id="advanced-binaural-enable" <%= systemControls.advancedBinauralEnabled ? 'checked' : '' %>>
            <label for="advanced-binaural-enable">Enable Advanced Patterns</label>
          </div>
          
          <div class="binaural-controls">
            <div class="binaural-control-group">
              <label for="pattern-select">Pattern Type:</label>
              <select id="pattern-select" class="binaural-select">
                <option value="descent" <%= (systemControls.binauralPattern === 'descent') ? 'selected' : '' %>>Descent (Alpha to Theta to Delta)</option>
                <option value="ascent" <%= (systemControls.binauralPattern === 'ascent') ? 'selected' : '' %>>Ascent (Delta to Theta to Alpha)</option>
                <option value="focus" <%= (systemControls.binauralPattern === 'focus') ? 'selected' : '' %>>Focus Cycle (Alpha-Beta-Alpha)</option>
                <option value="trance" <%= (systemControls.binauralPattern === 'trance') ? 'selected' : '' %>>Deep Trance (Alpha-Theta Loop)</option>
                <option value="custom" <%= (systemControls.binauralPattern === 'custom') ? 'selected' : '' %>>Custom Pattern</option>
              </select>
            </div>
            
            <div id="pattern-description" class="pattern-description">
              Descent pattern gradually moves from alert Alpha waves down through Theta into deep Delta, creating a natural descent into trance.
            </div>
            
            <div id="custom-pattern-container" class="binaural-control-group" style="<%= (systemControls.binauralPattern === 'custom') ? '' : 'display: none' %>">
              <label>Custom Pattern Sequence:</label>
              <div class="custom-pattern-editor">
                <div class="pattern-segments">
                  <div class="pattern-segment">
                    <select class="segment-wave">
                      <option value="alpha">Alpha</option>
                      <option value="theta">Theta</option>
                      <option value="delta">Delta</option>
                      <option value="beta">Beta</option>
                    </select>
                    <input type="number" class="segment-duration" min="1" max="60" value="5"> mins
                    <button class="remove-segment">Ã—</button>
                  </div>
                </div>
                <button id="add-segment" class="secondary-btn">Add Segment</button>
              </div>
            </div>
            
            <div class="binaural-control-group">
              <label for="pattern-duration">Total Duration:</label>
              <div class="slider-container">
                <input type="range" id="pattern-duration" min="5" max="60" value="<%= systemControls.patternDuration || 20 %>" step="5" class="binaural-slider">
                <span id="pattern-duration-value"><%= systemControls.patternDuration || 20 %> minutes</span>
              </div>
            </div>
            
            <div class="binaural-control-group">
              <label for="transition-time">Transition Time:</label>
              <div class="slider-container">
                <input type="range" id="transition-time" min="10" max="120" value="<%= systemControls.transitionTime || 30 %>" step="10" class="binaural-slider">
                <span id="transition-time-value"><%= systemControls.transitionTime || 30 %> seconds</span>
              </div>
            </div>
            
            <div class="binaural-visualization">
              <canvas id="pattern-visualization" width="400" height="120"></canvas>
              <div class="visualization-legend">
                <span class="beta-legend">Beta</span>
                <span class="alpha-legend">Alpha</span>
                <span class="theta-legend">Theta</span>
                <span class="delta-legend">Delta</span>
                <div class="time-axis">Time (minutes)</div>
              </div>
            </div>
          </div>
          
          <div class="binaural-actions">
            <button id="play-advanced-binaural" class="secondary-btn">Play Pattern</button>
            <button id="stop-advanced-binaural" class="secondary-btn" disabled>Stop</button>
            <button id="save-advanced-binaural" class="save-btn">Save Settings</button>
          </div>
        </div>
      <% } %>

    <% } else { %>
      <div class="locked-features-message">
        <p>ðŸ”’ Reach Level 1 to unlock trigger controls!</p>
        <p>Keep chatting with Bambi to earn XP and level up.</p>
      </div>
    <% } %>
  </div>

  <!-- </div>- XP progress bar -->
  <% if (userXp !== undefined) { %>
    <div class="xp-progress-container">
      <div class="xp-progress-label" id="xp-progress-label">
        <% if (userLevel < xpRequirements.length) { %>
          Level <%= userLevel %> â€¢ <%= userXp %> XP / <%= nextLevelXP %> XP
        <% } else { %>
          Level <%= userLevel %> â€¢ <%= userXp %> XP (MAX LEVEL)
        <% } %>
      </div>
      <div class="xp-progress-bar">
        <% if (userLevel < xpRequirements.length) { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: <%= Math.min(100, userXp / Math.max(1, nextLevelXP) * 100) %>%"></div>
        <% } else { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: 100%"></div>
        <% } %>
      </div>
    </div>
  <% } %>
</div>



<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Store XP requirements globally
    window.xpRequirements = [100, 250, 450, 700, 1200];
    
    // Tab navigation system
    const controlButtons = document.querySelectorAll('.control-btn:not(.disabled)');
    
    controlButtons.forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        
        // Toggle active states
        controlButtons.forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.control-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        
        this.classList.add('active');
        
        // Show target panel
        const targetPanel = document.getElementById(targetId);
        if (targetPanel) targetPanel.classList.add('active');
        
        // Save last active tab
        localStorage.setItem('bambiLastTab', targetId);
      });
    });
    
    // Set initial volume and speed from localStorage
    const volumeSlider = document.getElementById('loop-volume');
    const volumeValue = document.getElementById('volume-value');
    if (volumeSlider && volumeValue) {
      const storedVolume = localStorage.getItem('bambiAudioVolume');
      if (storedVolume !== null) {
        const volume = parseFloat(storedVolume);
        volumeSlider.value = volume * 10;
        volumeValue.textContent = Math.round(volume * 100) + '%';
      }
    }
    
    const speedSlider = document.getElementById('loop-speed');
    const speedValue = document.getElementById('speed-value');
    if (speedSlider && speedValue) {
      const storedSpeed = localStorage.getItem('bambiAudioSpeed');
      if (storedSpeed !== null) {
        speedSlider.value = storedSpeed;
        updateSpeedLabel(storedSpeed, speedValue);
      }
    }
    
    // Helper function for speed label
    function updateSpeedLabel(value, element) {
      if (!element) return;
      
      const speedVal = parseInt(value);
      if (speedVal === 5) {
        element.textContent = 'Normal';
      } else if (speedVal < 5) {
        element.textContent = 'Slower ' + (5 - speedVal) + 'x';
      } else {
        element.textContent = 'Faster ' + (speedVal - 5) + 'x';
      }
    }
    
    // Load the last tab from localStorage on page load
    const lastTab = localStorage.getItem('bambiLastTab');
    if (lastTab) {
      const tabButton = document.querySelector(`.control-btn[data-target="${lastTab}"]`);
      if (tabButton && !tabButton.classList.contains('disabled')) {
        tabButton.click();
      }
    }
    
    // Watch for trigger list changes to avoid duplicates
    const triggerList = document.getElementById('trigger-list');
    if (triggerList) {
      const observer = new MutationObserver(function(mutations) {
        if (mutations.some(m => m.addedNodes.length > 0)) {
          document.dispatchEvent(new CustomEvent('trigger-controls-loaded'));
          observer.disconnect();
        }
      });
      
      observer.observe(triggerList, { childList: true });
    }
  });
</script>

<!-- Load modular system control scripts -->
<script src="/js/controls/utils.js"></script>
<script src="/js/controls/system.js"></script>
<script src="/js/controls/trigger.js"></script>
<script src="/js/controls/collar.js"></script>
<script src="/js/controls/spiral.js"></script>
<script src="/js/controls/brainwave.js"></script>
<script src="/js/controls/advanced-binaural.js"></script>