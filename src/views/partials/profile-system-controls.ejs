<% 
// Default values if profile is not provided
const userLevel = profile ? profile.level || 0 : 0;
const userXp = profile ? profile.xp || 0 : 0;

// Define XP requirements for each level
const xpRequirements = [100, 250, 450, 700, 1200];

// Calculate next level XP requirement
const getNextLevelXP = (level) => {
  if (level < xpRequirements.length) {
    return xpRequirements[level];
  } else {
    // After level 5, just keep adding XP & show total
    return null;
  }
};

const nextLevelXP = userLevel < xpRequirements.length ? getNextLevelXP(userLevel) : null;
const systemControls = profile && profile.systemControls ? profile.systemControls : {};
%>

<div class="system-controls">
  <!-- Update the control buttons section -->
  <div id="buttons" class="control-buttons">
    <!-- Show triggers button only if level ≥ 1 -->
    <% if (userLevel >= 1) { %>
      <button id="triggers-btn" class="control-btn active" data-target="trigger-panel">Triggers</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 1 to unlock">Triggers 🔒</button>
    <% } %>
    
    <!-- Show collar feature if user level ≥ 2 -->
    <% if (userLevel >= 2) { %>
      <button id="collar-btn" class="control-btn" data-target="collar-panel">Collar</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 2 to unlock">Collar 🔒</button>
    <% } %>
    
    <!-- Show session history feature if user level ≥ 3 -->
    <% if (userLevel >= 3) { %>
      <button id="session-history-btn" class="control-btn" data-target="session-history-panel">Session History</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 3 to unlock">Session History 🔒</button>
    <% } %>
    
    <!-- Show spirals feature if user level ≥ 3 -->
    <% if (userLevel >= 4) { %>
      <button id="spirals-btn" class="control-btn" data-target="spirals-panel">Spirals</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 3 to unlock">Spirals 🔒</button>
    <% } %>
    
    <!-- Show hypnosis feature if user level ≥ 4 -->
    <% if (userLevel >= 5) { %>
      <button id="hypnosis-btn" class="control-btn" data-target="hypnosis-panel">Hypnosis</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 4 to unlock">Hypnosis 🔒</button>
    <% } %>
    
    <!-- Show audios feature if user level ≥ 6 (moved to 4th position) -->
    <% if (userLevel >= 6) { %>
      <button id="audios-btn" class="control-btn" data-target="audios-panel">Audios</button>
    <% } else { %>
      <button class="control-btn disabled" title="Reach Level 6 to unlock">Audios 🔒</button>
    <% } %>
    <!-- Show playlist feature if user level ≥ 6 -->
    
  </div>

  <!-- Update the control panels section to match the new button structure -->
  <div id="console" class="control-panels">
    <!-- Only render panels if the user has sufficient level -->
    <% if (userLevel >= 1) { %>
      <div id="trigger-panel" class="control-panel active">
        <h3>Trigger Toggles</h3>
        <div class="trigger-actions">
          <button id="activate-all" class="secondary-btn">Toggle All</button>
        </div>
        <div id="trigger-list" class="trigger-grid"></div>
      </div>
      
      <% if (userLevel >= 2) { %>
        <div id="collar-panel" class="control-panel">
          <h3>Collar Control</h3>
          <div id="collar-form-inputs">
            <div class="collar-toggle">
              <input type="checkbox" id="collar-enable" <%= systemControls.collarEnabled ? 'checked' : '' %>>
              <label for="collar-enable">Enable Collar</label>
            </div>
            <textarea id="textarea-collar" placeholder="Enter collar instructions..."><%= systemControls.collarText || '' %></textarea>
            <button id="save-collar" class="save-btn">Save Collar Settings</button>
          </div>
          <div class="collar-messages"></div>
        </div>
      <% } %>
      
      <% if (userLevel >= 3) { %>
        <div id="session-history-panel" class="control-panel">
          <h3>Session History Replay</h3>
          <div class="session-history-controls">
            <button id="load-history-btn" class="secondary-btn">Load Session History</button>
            <button id="replay-history-btn" class="secondary-btn" disabled>Replay Bambi's Responses</button>
            <div class="session-count" id="session-count"></div>
          </div>
          <div class="session-history-status" id="session-history-status"></div>
        </div>
      <% } %>
      
      <% if (userLevel >= 3) { %>
        <div id="spirals-panel" class="control-panel">
          <h3>Spirals Settings</h3>
          <div class="spirals-toggle">
            <input type="checkbox" id="spirals-enable" <%= systemControls.spiralsEnabled ? 'checked' : '' %>>
            <label for="spirals-enable">Enable Spirals</label>
          </div>
          <div class="spirals-preview">
            <!-- Spiral preview or settings would go here -->
            <p>Spiral settings will appear here in a future update.</p>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 4) { %>
        <div id="hypnosis-panel" class="control-panel">
          <h3>Hypnosis Settings</h3>
          <div class="hypnosis-toggle">
            <input type="checkbox" id="hypnosis-enable" <%= systemControls.hypnosisEnabled ? 'checked' : '' %>>
            <label for="hypnosis-enable">Enable Hypnosis</label>
          </div>
          <div class="hypnosis-settings">
            <!-- Hypnosis settings would go here -->
            <p>Hypnosis settings will appear here in a future update.</p>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 5) { %>
        <div id="toggle-all-panel" class="control-panel">
          <h3>Toggle All Triggers</h3>
          <div class="toggle-all-actions">
            <button id="select-all-triggers" class="secondary-btn">Select All Triggers</button>
            <button id="clear-all-triggers" class="secondary-btn">Clear All Triggers</button>
          </div>
        </div>
      <% } %>
      
      <% if (userLevel >= 6) { %>
        <div id="audios-panel" class="control-panel">
          <h3>Trigger Audios</h3>
          <div class="playlist-actions">
            <button id="play-playlist" class="secondary-btn">Play Random Playlist</button>
            <div class="trigger-toggle-item">
              <input type="checkbox" id="loop-toggle" class="toggle-input">
              <label for="loop-toggle" class="toggle-label">Continuous Loop</label>
            </div>
            
            <!-- Add speed control slider -->
            <div class="audio-speed-control">
              <label for="loop-speed">Loop Speed:</label>
              <input type="range" id="loop-speed" min="1" max="10" value="5" class="speed-slider">
              <span id="speed-value">Normal</span>
            </div>
          </div>
        </div>
      <% } %>
    <% } else { %>
      <div class="locked-features-message">
        <p>🔒 Reach Level 1 to unlock trigger controls!</p>
        <p>Keep chatting with Bambi to earn XP and level up.</p>
      </div>
    <% } %>
  </div>

  <!-- Add XP progress bar at the bottom of system controls -->
  <% if (userXp !== undefined) { %>
    <div class="xp-progress-container">
      <div class="xp-progress-label" id="xp-progress-label">
        <% if (userLevel < xpRequirements.length) { %>
          Level <%= userLevel %> • <%= userXp %> XP / <%= nextLevelXP %> XP
        <% } else { %>
          Level <%= userLevel %> • <%= userXp %> XP (MAX LEVEL)
        <% } %>
      </div>
      <div class="xp-progress-bar">
        <% if (userLevel < xpRequirements.length) { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: <%= Math.min(100, userXp / Math.max(1, nextLevelXP) * 100) %>%"></div>
        <% } else { %>
          <div class="xp-progress-fill" id="xp-progress-fill" style="width: 100%"></div>
        <% } %>
      </div>
    </div>
  <% } %>
</div>

<style>
  /* Add styles for disabled buttons */
  .control-btn.disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: #444;
    color: #aaa;
    position: relative;
  }
  
  /* XP progress bar styling */
  .xp-progress-container {
    margin-top: 20px;
    padding: 10px;
    background: rgba(0, 0, 0, 0.2);
    border-radius: 5px;
  }
  
  .xp-progress-label {
    margin-bottom: 5px;
    font-size: 0.8em;
    color: rgba(255, 255, 255, 0.7);
    text-align: center;
  }
  
  .xp-progress-bar {
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
    overflow: hidden;
    position: relative;
  }
  
  .xp-progress-fill {
    height: 100%;
    background: linear-gradient(to right, #00ffff, #ff00ff);
    border-radius: 4px;
    transition: width 0.5s ease-in-out;
  }
  
  /* Audio speed control styling */
  .audio-speed-control {
    margin-top: 15px;
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .speed-slider {
    flex: 1;
    height: 6px;
    -webkit-appearance: none;
    appearance: none;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
    outline: none;
  }

  .speed-slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #ff00ff;
    cursor: pointer;
  }

  .speed-slider::-moz-range-thumb {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    background: #ff00ff;
    cursor: pointer;
  }

  #speed-value {
    min-width: 80px;
    text-align: center;
    font-size: 0.9em;
    color: #ff00ff;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Store XP requirements in a global variable for access in socket updates
    window.xpRequirements = [100, 250, 450, 700, 1200];
    
    // Handle control button clicks
    const controlButtons = document.querySelectorAll('.control-btn:not(.disabled)');
    
    controlButtons.forEach(button => {
      button.addEventListener('click', function() {
        const targetId = this.getAttribute('data-target');
        
        // Remove active class from all buttons
        controlButtons.forEach(btn => {
          btn.classList.remove('active');
        });
        
        // Hide all panels
        document.querySelectorAll('.control-panel').forEach(panel => {
          panel.classList.remove('active');
        });
        
        // Add active class to clicked button
        this.classList.add('active');
        
        // Show target panel
        const targetPanel = document.getElementById(targetId);
        if (targetPanel) {
          targetPanel.classList.add('active');
        }
      });
    });
    
    // Initialize trigger toggles
    var triggerList = document.getElementById('trigger-list');
    
    if (triggerList && !triggerList.hasChildNodes()) {
      // Fetch triggers from the JSON file instead of hardcoding
      fetch('/config/triggers.json')
        .then(response => response.json())
        .then(data => {
          const triggers = data.triggers;
          var activeTriggers = [];
          
          if (typeof profileData !== 'undefined' && profileData.systemControls && profileData.systemControls.activeTriggers) {
            activeTriggers = profileData.systemControls.activeTriggers;
          }
          
          triggers.forEach((trigger, index) => {
            var triggerItem = document.createElement('div');
            triggerItem.className = 'trigger-toggle-item';
            
            var toggle = document.createElement('input');
            toggle.type = 'checkbox';
            toggle.id = `toggle-${index}`;
            toggle.className = 'toggle-input';
            toggle.setAttribute('data-trigger', trigger.name);
            
            // Set tooltip with description
            if (trigger.description) {
              toggle.title = trigger.description;
            }
            
            if (activeTriggers.includes(trigger.name)) {
              toggle.checked = true;
            }
            
            toggle.addEventListener('change', function() {
              saveTriggerState();
              
              // Award XP for using a trigger (+3 XP per trigger use)
              if (typeof socket !== 'undefined' && socket.connected && toggle.checked) {
                socket.emit('award-xp', {
                  username: document.body.getAttribute('data-username') || window.username,
                  amount: 3,
                  action: 'trigger_used'
                });
              }
            });
            
            var label = document.createElement('label');
            label.htmlFor = `toggle-${index}`;
            label.className = 'toggle-label';
            label.textContent = trigger.name;
            
            // Add tooltip to label too
            if (trigger.description) {
              label.title = trigger.description;
            }
            
            triggerItem.appendChild(toggle);
            triggerItem.appendChild(label);
            triggerList.appendChild(triggerItem);
          });
        })
        .catch(error => {
          console.error('Error loading triggers:', error);
          // Fallback to a basic message if triggers can't be loaded
          triggerList.innerHTML = '<p>Failed to load triggers. Please refresh the page.</p>';
        });
    }
    
    // Setup real-time XP updates
    if (typeof socket !== 'undefined') {
      // Listen for profile-update events to update XP display
      socket.on('profile-update', function(data) {
        updateXPDisplay(data);
      });
      
      // Listen for xp:update events coming from lmStudio's XP awards
      socket.on('xp:update', function(data) {
        updateXPDisplay(data);
        showXPNotification(data.xpEarned);
      });
      
      // Listen for level-up events
      socket.on('level-up', function(data) {
        showLevelUpNotification(data.level);
        // Reload the page after a level up to show new unlocked features
        setTimeout(() => {
          window.location.reload();
        }, 3000);
      });
    }
    
    function saveTriggerState() {
      var username = document.body.getAttribute('data-username') || window.username;
      if (!username) return;
      
      var toggleInputs = document.querySelectorAll('.toggle-input');
      var activeTriggers = [];
      
      toggleInputs.forEach(input => {
        if (input.checked) {
          const triggerName = input.getAttribute('data-trigger');
          activeTriggers.push(triggerName);
        }
      });
      
      if (typeof socket !== 'undefined' && socket.connected) {
        socket.emit('update-system-controls', {
          username: username,
          activeTriggers: activeTriggers
        });
      } else {
        fetch(`/profile/${username}/system-controls`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            activeTriggers: activeTriggers
          })
        });
      }
    }
    
    const collarEnable = document.getElementById('collar-enable');
    const textareaCollar = document.getElementById('textarea-collar');
    const saveCollarBtn = document.getElementById('save-collar');
    
    if (saveCollarBtn) {
      saveCollarBtn.addEventListener('click', function() {
        saveCollarSettings();
        
        // Award XP for using the collar (+15 XP)
        if (typeof socket !== 'undefined' && socket.connected && collarEnable.checked) {
          socket.emit('award-xp', {
            username: document.body.getAttribute('data-username') || window.username,
            amount: 15,
            action: 'collar_used'
          });
        }
      });
    }
    
    function saveCollarSettings() {
      const username = document.body.getAttribute('data-username') || window.username;
      if (!username) return;
      
      const collarEnabled = collarEnable && collarEnable.checked;
      const collarText = textareaCollar ? textareaCollar.value.trim() : '';
      
      if (typeof socket !== 'undefined' && socket.connected) {
        socket.emit('update-system-controls', {
          username: username,
          collarEnabled: collarEnabled,
          collarText: collarText
        });
        
        showCollarMessage('Collar settings saved!');
      } else {
        fetch(`/profile/${username}/system-controls`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            collarEnabled: collarEnabled,
            collarText: collarText
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showCollarMessage('Collar settings saved!');
          } else {
            showCollarMessage('Failed to save collar settings.', true);
          }
        })
        .catch(error => {
          showCollarMessage('Error saving collar settings: ' + error.message, true);
        });
      }
    }
    
    // Function to update XP display
    function updateXPDisplay(data) {
      const xpLabel = document.getElementById('xp-progress-label');
      const xpFill = document.getElementById('xp-progress-fill');
      
      if (!xpLabel || !xpFill) return;
      
      const level = data.level || 0;
      const xp = data.xp || 0;
      const xpRequirements = window.xpRequirements || [100, 250, 450, 700, 1200];
      
      // Add animation class and then remove it
      xpLabel.classList.add('updating');
      setTimeout(() => xpLabel.classList.remove('updating'), 600);
      
      // Update the label text
      if (level < xpRequirements.length) {
        const nextLevelXP = xpRequirements[level];
        xpLabel.textContent = `Level ${level} • ${xp} XP / ${nextLevelXP} XP`;
        
        // Update progress bar width
        const percentage = Math.min(100, (xp / Math.max(1, nextLevelXP)) * 100);
        xpFill.style.width = `${percentage}%`;
      } else {
        xpLabel.textContent = `Level ${level} • ${xp} XP (MAX LEVEL)`;
        xpFill.style.width = '100%';
      }
    }
    
    function showCollarMessage(message, isError = false) {
      const messagesContainer = document.querySelector('.collar-messages');
      if (!messagesContainer) return;
      
      const messageElement = document.createElement('div');
      messageElement.className = 'collar-message' + (isError ? ' error' : '' );
      messageElement.textContent = message;
      
      messagesContainer.prepend(messageElement);
      
      setTimeout(() => {
        messageElement.style.opacity = '0';
        setTimeout(() => {
          messagesContainer.removeChild(messageElement);
        }, 300);
      }, 5000);
    }
    
    function showXPNotification(amount) {
      if (!amount) return;
      
      // Create notification if it doesn't exist
      let notification = document.querySelector('.xp-notification');
      if (!notification) {
        notification = document.createElement('div');
        notification.className = 'xp-notification';
        document.body.appendChild(notification);
      }
      
      // Set notification content and show it
      notification.textContent = `+${amount} XP`;
      notification.classList.add('show');
      
      // Remove notification after 3 seconds
      setTimeout(() => {
        notification.classList.remove('show');
        notification.classList.add('fade-out');
      }, 3000);
    }
    
    function showLevelUpNotification(level) {
      if (!level) return;
      
      // Create notification if it doesn't exist
      let notification = document.querySelector('.level-up-notification');
      if (!notification) {
        notification = document.createElement('div');
        notification.className = 'level-up-notification';
        
        const icon = document.createElement('div');
        icon.className = 'level-up-icon';
        icon.textContent = '⭐';
        
        const text = document.createElement('div');
        text.className = 'level-up-text';
        
        notification.appendChild(icon);
        notification.appendChild(text);
        document.body.appendChild(notification);
      }
      
      // Update text content
      const textElement = notification.querySelector('.level-up-text');
      if (textElement) {
        textElement.textContent = `Level Up! You are now level ${level}!`;
      }
      
      // Show the notification
      notification.classList.add('show');
      
      // Remove notification after 5 seconds
      setTimeout(() => {
        notification.classList.remove('show');
        notification.classList.add('fade-out');
      }, 5000);
    }
    
    const selectAllBtn = document.getElementById('select-all-triggers');
    const clearAllBtn = document.getElementById('clear-all-triggers');
    
    if (selectAllBtn) {
      selectAllBtn.addEventListener('click', function() {
        const triggerToggles = document.querySelectorAll('.toggle-input');
        triggerToggles.forEach(toggle => {
          toggle.checked = true;
        });
        
        saveTriggerState();
      });
    }
    
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', function() {
        const triggerToggles = document.querySelectorAll('.toggle-input');
        triggerToggles.forEach(toggle => {
          toggle.checked = false;
        });
        
        saveTriggerState();
      });
    }

    const loopToggle = document.getElementById('loop-toggle');
    const loopSpeed = document.getElementById('loop-speed');
    const speedValue = document.getElementById('speed-value');

    if (loopToggle) {
      loopToggle.addEventListener('change', function() {
        if (this.checked) {
          // Use bambiAudio API to control continuous playback
          if (window.bambiAudio && typeof window.bambiAudio.startContinuousPlayback === 'function') {
            window.bambiAudio.startContinuousPlayback();
          }
        } else {
          if (window.bambiAudio && typeof window.bambiAudio.stopContinuousPlayback === 'function') {
            window.bambiAudio.stopContinuousPlayback();
          }
        }
      });
    }

    if (loopSpeed) {
      loopSpeed.addEventListener('input', function() {
        const speed = parseInt(this.value, 10);
        let speedText = 'Normal';
        if (speed < 5) {
          speedText = 'Slow';
        } else if (speed > 5) {
          speedText = 'Fast';
        }
        speedValue.textContent = speedText;

        // Use bambiAudio API to adjust playback speed
        if (window.bambiAudio && typeof window.bambiAudio.setPlaybackSpeed === 'function') {
          window.bambiAudio.setPlaybackSpeed(speed);
        }
      });
    }

    const loopSpeedSlider = document.getElementById('loop-speed');
    const speedValueDisplay = document.getElementById('speed-value');

    if (loopSpeedSlider) {
      // Set initial speed value
      window.loopSpeedFactor = 1.0;
      
      loopSpeedSlider.addEventListener('input', function() {
        const value = parseInt(this.value);
        let speedLabel = '';
        
        // Map slider values to speed factors (1-10 scale) with more descriptive names
        if (value <= 2) {
          window.loopSpeedFactor = 2.0;
          speedLabel = 'Relaxation (Slow)';
        } else if (value <= 4) {
          window.loopSpeedFactor = 1.5;
          speedLabel = 'Gentle Drop';
        } else if (value <= 5) {
          window.loopSpeedFactor = 1.0;
          speedLabel = 'Normal';
        } else if (value <= 6) {
          window.loopSpeedFactor = 0.36;
          speedLabel = 'Trance (2.5x)';
        } else if (value <= 8) {
          window.loopSpeedFactor = 0.18;
          speedLabel = 'Deep Trance (3x)';
        } else {
          window.loopSpeedFactor = 0.06;
          speedLabel = 'Brainwash (4x)';
        }
        
        // Update display text
        if (speedValueDisplay) {
          speedValueDisplay.textContent = speedLabel;
        }
        
        // Update any active playback
        if (window.bambiAudio && typeof window.bambiAudio.updatePlaybackSpeed === 'function') {
          window.bambiAudio.updatePlaybackSpeed(window.loopSpeedFactor);
        }
      });
    }

    // Load triggers from the triggers.json file
    if (window.bambiAudio && typeof window.bambiAudio.loadTriggers === 'function') {
      window.bambiAudio.loadTriggers();
    }
    
    // Toggle all button functionality
    const activateAllBtn = document.getElementById('activate-all');
    if (activateAllBtn) {
      activateAllBtn.addEventListener('click', function() {
        if (window.bambiAudio && typeof window.bambiAudio.toggleAllTriggers === 'function') {
          window.bambiAudio.toggleAllTriggers();
        }
      });
    }

    const loadHistoryBtn = document.getElementById('load-history-btn');
    const replayHistoryBtn = document.getElementById('replay-history-btn');
    const sessionCountEl = document.getElementById('session-count');
    const sessionHistoryStatus = document.getElementById('session-history-status');
    
    if (loadHistoryBtn) {
      loadHistoryBtn.addEventListener('click', function() {
        const username = document.body.getAttribute('data-username') || window.username;
        if (!username) {
          updateSessionHistoryStatus('Error: No username found', true);
          return;
        }
        
        updateSessionHistoryStatus('Loading session history...', false);
        
        fetch(`/api/sessions/${username}`)
          .then(response => {
            if (!response.ok) {
              throw new Error('Failed to load session history');
            }
            return response.json();
          })
          .then(data => {
            if (!data.sessions || data.sessions.length === 0) {
              updateSessionHistoryStatus('No session history found', true);
              return;
            }
            
            // Store sessions in window object for replay functionality
            window.sessionHistories = data.sessions;
            
            // Update count display
            if (sessionCountEl) {
              sessionCountEl.textContent = `${data.sessions.length} sessions available`;
            }
            
            // Enable replay button
            if (replayHistoryBtn) {
              replayHistoryBtn.disabled = false;
            }
            
            updateSessionHistoryStatus(`Loaded ${data.sessions.length} session(s)`, false);
            
            // Award XP for loading session history (+5 XP)
            if (typeof socket !== 'undefined' && socket.connected) {
              socket.emit('award-xp', {
                username: username,
                amount: 5,
                action: 'history_loaded'
              });
            }
          })
          .catch(error => {
            updateSessionHistoryStatus(`Error: ${error.message}`, true);
          });
      });
    }
    
    if (replayHistoryBtn) {
      replayHistoryBtn.addEventListener('click', function() {
        if (!window.sessionHistories || window.sessionHistories.length === 0) {
          updateSessionHistoryStatus('No sessions to replay', true);
          return;
        }
        
        // Select a random session
        const randomIndex = Math.floor(Math.random() * window.sessionHistories.length);
        const session = window.sessionHistories[randomIndex];
        
        // Filter for only Bambi's responses
        const bambiResponses = session.messages.filter(msg => msg.sender === 'assistant');
        
        if (bambiResponses.length === 0) {
          updateSessionHistoryStatus('No Bambi responses in this session', true);
          return;
        }
        
        // Pick a random Bambi response
        const randomResponse = bambiResponses[Math.floor(Math.random() * bambiResponses.length)];
        
        // Display the response in the chat
        if (window.displayHistoricalMessage && typeof window.displayHistoricalMessage === 'function') {
          window.displayHistoricalMessage(randomResponse.content);
          updateSessionHistoryStatus('Playing a historical response from Bambi', false);
        } else {
          // Fallback if the display function isn't available
          updateSessionHistoryStatus('Bambi says: ' + randomResponse.content.substring(0, 50) + '...', false);
        }
        
        // Award XP for replaying session history (+10 XP)
        const username = document.body.getAttribute('data-username') || window.username;
        if (username && typeof socket !== 'undefined' && socket.connected) {
          socket.emit('award-xp', {
            username: username,
            amount: 10,
            action: 'history_replayed'
          });
        }
      });
    }
    
    function updateSessionHistoryStatus(message, isError = false) {
      if (!sessionHistoryStatus) return;
      
      sessionHistoryStatus.textContent = message;
      sessionHistoryStatus.className = 'session-history-status' + (isError ? ' error' : ' success');
      
      // Clear success message after 5 seconds, but keep errors visible
      if (!isError) {
        setTimeout(() => {
          if (sessionHistoryStatus.textContent === message) {
            sessionHistoryStatus.textContent = '';
            sessionHistoryStatus.className = 'session-history-status';
          }
        }, 5000);
      }
    }
  });
</script>