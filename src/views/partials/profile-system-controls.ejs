<% 
// Default values if profile is not provided
const userLevel = profile ? profile.level || 0 : 0;
const userXp = profile ? profile.xp || 0 : 0;

// Define XP requirements for each level
const xpRequirements = [100, 250, 450, 700, 1200];

// Calculate next level XP requirement
const getNextLevelXP = (level) => {
  return Math.pow(level + 1, 2) * 100;
};

const nextLevelXP = getNextLevelXP(userLevel);
const systemControls = profile && profile.systemControls ? profile.systemControls : {};
const activeTriggers = profile && profile.activeTriggers ? profile.activeTriggers : [];
%>

<div class="system-controls">
  <!-- Control buttons section -->
  <div class="control-buttons">
    <button id="triggers-btn" class="control-btn active" data-target="trigger-panel">Triggers</button>
    <button id="collar-btn" class="control-btn" data-target="collar-panel">Collar</button>
  </div>

  <!-- Control panels section -->
  <div class="control-panels">
    <div id="trigger-panel" class="control-panel active">
      <div id="trigger-toggles" class="trigger-toggles">
        <!-- Triggers will be populated by JavaScript -->
        <p>Loading triggers...</p>
      </div>
    </div>
    
    <div id="collar-panel" class="control-panel">
      <div class="collar-container">
        <label for="collar-text">Collar Text:</label>
        <input type="text" id="collar-text" placeholder="Enter collar text..." 
               value="<%= systemControls.collarText || '' %>">
        <div class="collar-buttons">
          <button id="collar-enable-btn" class="<%= systemControls.collarEnabled ? 'active' : '' %>">
            <%= systemControls.collarEnabled ? 'Disable Collar' : 'Enable Collar' %>
          </button>
          <button id="collar-save-btn">Save Text</button>
        </div>
      </div>
    </div>
  </div>

  <!-- XP progress bar -->
  <div class="xp-progress-container">
    <span class="xp-progress-label">Level: <%= userLevel %> | XP: <%= userXp %>/<%= nextLevelXP %></span>
    <div class="xp-progress-bar">
      <div class="xp-progress-fill" style="width: <%= Math.min(100, (userXp / nextLevelXP) * 100) %>%"></div>
    </div>
  </div>
</div>

<style>
  /* Control buttons styling */
  .control-buttons {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .control-btn {
    background-color: #333;
    color: #fff;
    border: 1px solid #555;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .control-btn.active {
    background-color: #ff00ff;
    color: #000;
    border-color: #ff00ff;
  }
  
  .control-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  /* Control panels styling */
  .control-panels {
    background-color: #222;
    border: 1px solid #444;
    border-radius: 4px;
    padding: 1rem;
    margin-bottom: 1rem;
  }
  
  .control-panel {
    display: none;
  }
  
  .control-panel.active {
    display: block;
  }
  
  /* Trigger toggles styling */
  .trigger-toggles {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .trigger-toggle {
    background-color: #333;
    color: #ccc;
    border: 1px solid #555;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .trigger-toggle.active {
    background-color: #ff00ff;
    color: #000;
    border-color: #ff00ff;
  }
  
  /* Collar styling */
  .collar-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .collar-container input {
    padding: 0.5rem;
    background-color: #333;
    color: #fff;
    border: 1px solid #555;
    border-radius: 4px;
  }
  
  .collar-buttons {
    display: flex;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  /* XP progress bar styling */
  .xp-progress-container {
    margin-top: 1rem;
  }
  
  .xp-progress-label {
    display: block;
    font-size: 0.9rem;
    margin-bottom: 0.25rem;
    color: #ccc;
  }
  
  .xp-progress-bar {
    height: 0.5rem;
    background-color: #333;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .xp-progress-fill {
    height: 100%;
    background-color: #ff00ff;
    width: 0%;
    transition: width 0.5s ease;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Make active triggers data available to triggers.js
    window.activeTriggers = <%= JSON.stringify(activeTriggers) %>;
    
    // Set up control panel toggling
    const controlBtns = document.querySelectorAll('.control-btn');
    const controlPanels = document.querySelectorAll('.control-panel');
    
    // Setup control button clicking
    controlBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        // Skip if disabled
        if (btn.classList.contains('disabled')) return;
        
        const target = btn.dataset.target;
        
        // Toggle active state on buttons
        controlBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // Show corresponding panel
        controlPanels.forEach(panel => {
          panel.classList.toggle('active', panel.id === target);
        });
      });
    });
    
    // Setup collar button
    const collarEnableBtn = document.getElementById('collar-enable-btn');
    if (collarEnableBtn) {
      collarEnableBtn.addEventListener('click', () => {
        const isEnabled = collarEnableBtn.classList.contains('active');
        collarEnableBtn.classList.toggle('active');
        collarEnableBtn.textContent = isEnabled ? 'Enable Collar' : 'Disable Collar';
        
        // Update via socket if available
        if (window.socket && window.socket.connected) {
          window.socket.emit('update-system-controls', {
            username: '<%= profile ? profile.username : "" %>',
            collarEnabled: !isEnabled
          });
        }
      });
    }
    
    // Setup collar save
    const collarSaveBtn = document.getElementById('collar-save-btn');
    const collarText = document.getElementById('collar-text');
    
    if (collarSaveBtn && collarText) {
      collarSaveBtn.addEventListener('click', () => {
        // Update via socket if available
        if (window.socket && window.socket.connected) {
          window.socket.emit('update-system-controls', {
            username: '<%= profile ? profile.username : "" %>',
            collarText: collarText.value
          });
          
          // Visual feedback
          collarSaveBtn.textContent = 'Saved!';
          setTimeout(() => {
            collarSaveBtn.textContent = 'Save Text';
          }, 2000);
        }
      });
    }
  });
</script>