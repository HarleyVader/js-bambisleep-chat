<nav class="main-nav">
  <div class="nav-container">
    <div class="nav-links">
      <ul>
        <li><a href="/"class="logo">BambiSleep.Chat AIGF</a></li>
        <!-- <li><a href="/psychodelic-trigger-mania">Psychodelic Trigger Mania</a></li> -->
        <li><a href="/scrapers">Scrapers</a></li>
        <li><a href="/help">Help</a></li>
        <li><a href="/bambis">All Bambis</a></li>
        <% if (typeof bambi !== 'undefined' && bambi) { %>
          <li><a href="/bambis/<%= bambi.username %>"><%= bambi.username %></a></li>
        <% } %>
        <!-- <li><a href="/settings">Settings</a></li> Added Settings link -->
      </ul>
    </div>
  </div>
</nav>
<!-- Replace your bambiname container with this improved version -->
<div id="bambiname-container">
  <!-- This will be updated dynamically via JavaScript -->
  <button id="set-bambiname-btn" class="neon-button">Set BambiName</button>
  <span class="bambiname-display" style="display:none;">BambiName: </span>
</div>

<!-- Add modal dialog for setting BambiName -->
<div id="username-modal" class="modal">
  <div class="modal-content">
    <p>give me your bambi name:</p>
    <input type="text" id="username-input" placeholder="Enter username">
    <button id="username-submit">Submit</button>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get references to the elements
    const setBambiNameBtn = document.getElementById('set-bambiname-btn');
    const usernameModal = document.getElementById('username-modal');
    const usernameInput = document.getElementById('username-input');
    const usernameSubmit = document.getElementById('username-submit');
    
    // Initially hide modal until we confirm it needs to be shown
    if (usernameModal) {
      usernameModal.style.display = 'none';
    }
    
    // Check if URL has error param - show modal if it does
    const urlParams = new URLSearchParams(window.location.search);
    const hasErrorParam = urlParams.has('error');
    
    if (hasErrorParam && usernameModal) {
      usernameModal.style.display = 'block';
      // Display the error message if present
      const errorMsg = urlParams.get('error');
      if (errorMsg) {
        const errorElement = document.createElement('p');
        errorElement.textContent = errorMsg;
        errorElement.style.color = 'red';
        usernameModal.querySelector('.modal-content').prepend(errorElement);
      }
    } else {
      // Only check auth if no error param
      checkAuthentication();
    }
    
    // Function to check authentication status
    function checkAuthentication() {
      // Check server-side authentication status first
      fetch('/api/auth/status')
        .then(res => res.json())
        .then(data => {
          console.log("Auth status response:", data);
          if (data.authenticated && data.username) {
            // Server says we're authenticated
            const bambiname = data.username;
            
            // Update all client storage
            document.cookie = `bambiname=${encodeURIComponent(bambiname)};path=/;max-age=${30*24*60*60}`;
            localStorage.setItem('bambiname', bambiname);
            window.username = bambiname;
            
            // Hide modal
            if (usernameModal) usernameModal.style.display = 'none';
            
            console.log('Authentication verified with server:', bambiname);
            
            // Update any UI elements
            const bambiNameDisplay = document.querySelector('.bambiname-display');
            if (bambiNameDisplay) {
              bambiNameDisplay.textContent = `BambiName: ${bambiname}`;
              bambiNameDisplay.style.display = 'inline';
            }
            
            // Force UI update for the button/display swap
            const bambiNameContainer = document.getElementById('bambiname-container');
            if (bambiNameContainer) {
              if (setBambiNameBtn) setBambiNameBtn.style.display = 'none';
              if (!bambiNameDisplay) {
                const newDisplay = document.createElement('span');
                newDisplay.className = 'bambiname-display';
                newDisplay.textContent = `BambiName: ${bambiname}`;
                newDisplay.style.display = 'inline';
                bambiNameContainer.appendChild(newDisplay);
              }
            }
          } else {
            // Fall back to client-side checks
            checkClientStorage();
          }
        })
        .catch(err => {
          console.error('Server authentication check failed:', err);
          // Fall back to client-side checks
          checkClientStorage();
        });
    }
    
    // Function to check client-side storage
    function checkClientStorage() {
      // Check for bambiname in cookies first (primary source of truth)
      function getBambiNameFromCookie() {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; bambiname=`);
        if (parts.length === 2) return decodeURIComponent(parts.pop().split(';').shift());
        return null;
      }
      
      const bambiname = getBambiNameFromCookie();
      
      // If no bambiname in cookies, check localStorage as fallback
      if (!bambiname) {
        const savedBambiname = localStorage.getItem('bambiname');
        if (savedBambiname) {
          // If it's in localStorage but not cookies, set the cookie
          document.cookie = `bambiname=${encodeURIComponent(savedBambiname)};path=/;max-age=${30*24*60*60}`;
          window.username = savedBambiname;
          
          // Update UI to show we have a bambiname
          updateBambiNameUI(savedBambiname);
        } else {
          // Show modal if no name saved anywhere
          if (usernameModal) usernameModal.style.display = 'block';
        }
      } else {
        // Set localStorage to match cookie for backward compatibility
        localStorage.setItem('bambiname', bambiname);
        window.username = bambiname;
        
        // Update UI to show we have a bambiname
        updateBambiNameUI(bambiname);
      }
    }
    
    // Helper function to update UI
    function updateBambiNameUI(bambiname) {
      // Hide the modal
      if (usernameModal) usernameModal.style.display = 'none';
      
      // Update display
      const bambiNameDisplay = document.querySelector('.bambiname-display');
      const setBambiNameBtn = document.getElementById('set-bambiname-btn');
      
      if (bambiNameDisplay) {
        bambiNameDisplay.textContent = `BambiName: ${bambiname}`;
        bambiNameDisplay.style.display = 'inline-block';
      }
      
      if (setBambiNameBtn) {
        setBambiNameBtn.style.display = 'none';
      }
    }
    
    // Add click event for the "Set BambiName" button
    if (setBambiNameBtn) {
      setBambiNameBtn.addEventListener('click', function() {
        if (usernameModal) usernameModal.style.display = 'block';
      });
    }
    
    // Close modal when clicking outside
    window.addEventListener('click', function(event) {
      if (event.target === usernameModal) {
        usernameModal.style.display = 'none';
      }
    });
    
    // Add event listener to the submit button
    if (usernameSubmit) {
      usernameSubmit.addEventListener('click', function(e) {
        e.preventDefault();
        submitBambiname();
      });
    }
    
    // Submit on Enter key
    if (usernameInput) {
      usernameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          submitBambiname();
        }
      });
    }
    
    // Update the submitBambiname function
    function submitBambiname() {
      const bambiname = usernameInput.value.trim();
      if (!bambiname) return;
      
      // Store in both cookie and localStorage for compatibility
      document.cookie = `bambiname=${encodeURIComponent(bambiname)};path=/;max-age=${30*24*60*60}`;
      localStorage.setItem('bambiname', bambiname);
      window.username = bambiname;
      
      // Hide modal immediately to improve user experience
      usernameModal.style.display = 'none';
      
      // Submit to server with improved error handling
      fetch('/api/bambis/set-bambiname', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ bambiname }),
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to set bambiname on server');
        }
        return response.json();
      })
      .then(data => {
        console.log('BambiName set successfully:', data);
        
        // Check for error parameter in URL and remove it if it exists
        const urlParams = new URLSearchParams(window.location.search);
        const hasErrorParam = urlParams.has('error');
        
        if (hasErrorParam && window.history && window.history.replaceState) {
          const url = new URL(window.location);
          url.searchParams.delete('error');
          window.history.replaceState({}, '', url);
        }
        
        // If on creation page, don't reload - otherwise reload to apply changes
        if (!window.location.pathname.includes('/bambis/new') && 
            !window.location.pathname.includes('/bambis/create')) {
          window.location.reload();
        }
      })
      .catch(error => {
        console.error('Server error:', error);
        if (typeof showNotification === 'function') {
          showNotification('Error setting bambiname: ' + error.message, 'error');
        } else {
          alert('Error setting bambiname: ' + error.message);
        }
      });
    }
  });
</script>