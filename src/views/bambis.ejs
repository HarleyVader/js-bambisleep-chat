<!DOCTYPE html>
<html lang="en">
<%- include('../views/partials/head') %>
  <title>Bambi Profiles | Bambisleep.chat</title>
  <style>
    .profiles-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }
    
    .profile-card {
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      overflow: hidden;
      transition: transform 0.3s ease;
      background-color: var(--card-bg);
    }
    
    .profile-card:hover {
      transform: translateY(-5px);
    }
    
    .profile-image {
      width: 100%;
      height: 200px;
      object-fit: cover;
    }
    
    .profile-info {
      padding: 1rem;
    }
    
    .profile-name {
      font-size: 1.2rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    
    .profile-description {
      font-size: 0.9rem;
      color: var(--text-secondary);
      margin-bottom: 1rem;
      height: 60px;
      overflow: hidden;
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      line-clamp: 3;
      -webkit-box-orient: vertical;
    }
    
    .profile-details {
      display: flex;
      justify-content: space-between;
      font-size: 0.8rem;
      color: var(--text-muted);
    }
    
    .pagination {
      display: flex;
      justify-content: center;
      margin-top: 2rem;
    }
    
    .pagination a, .pagination span {
      padding: 0.5rem 1rem;
      margin: 0 0.25rem;
      border-radius: 4px;
      text-decoration: none;
      color: var(--text-primary);
    }
    
    .pagination a:hover {
      background-color: var(--accent-hover);
    }
    
    .pagination .active {
      background-color: var(--accent);
      color: white;
    }
    
    .create-profile-section {
      margin: 2rem 0;
      padding: 2rem;
      background-color: var(--card-bg);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .form-group {
      margin-bottom: 1rem;
    }
    
    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    input, textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--border);
      border-radius: 4px;
      background-color: var(--input-bg);
      color: var(--text-primary);
    }
    
    button {
      padding: 0.75rem 1.5rem;
      background-color: var(--accent);
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s ease;
    }
    
    button:hover {
      background-color: var(--accent-hover);
    }
    
    .error-message {
      color: var(--error);
      padding: 1rem;
      background-color: var(--error-bg);
      border-radius: 4px;
      margin-bottom: 1rem;
    }

    .validation-message {
      margin-top: 0.25rem;
      font-size: 0.8rem;
    }

    .validation-message.valid {
      color: green;
    }

    .validation-message.invalid {
      color: var(--error);
    }

    .char-counter {
      text-align: right;
      font-size: 0.8rem;
      color: var(--text-muted);
      margin-top: 0.25rem;
    }

    input.invalid, textarea.invalid {
      border-color: var(--error);
    }

    input.valid, textarea.valid {
      border-color: green;
    }

    button[type="submit"]:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
  </style>

<body>
  <%- include('../views/partials/nav.ejs') %>
  
  <main class="container">
    <h1>Bambi Profiles</h1>
    
    <% if (locals.error) { %>
      <div class="error-message">
        <%= error %>
      </div>
    <% } %>
    
    <div class="create-profile-section">
      <h2>Create Your Bambi Profile</h2>
      <form id="createProfileForm">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" id="username" name="username" required minlength="3" placeholder="Your unique bambi name">
        </div>
        
        <div class="form-group">
          <label for="displayName">Display Name (optional)</label>
          <input type="text" id="displayName" name="displayName" placeholder="Your display name">
        </div>
        
        <div class="form-group">
          <label for="description">About You</label>
          <textarea id="description" name="description" rows="4" placeholder="Tell us about yourself..."></textarea>
        </div>
        
        <button type="submit">Create Profile</button>
      </form>
    </div>
    
    <% if (locals.bambis && bambis.length > 0) { %>
      <div class="profiles-container">
        <% bambis.forEach(bambi => { %>
          <div class="profile-card">
            <img src="<%= bambi.profilePictureUrl %>" alt="<%= bambi.displayName || bambi.username %>" class="profile-avatar">
            <div class="profile-info">
              <h3 class="profile-name"><a href="/bambis/<%= bambi.username %>"><%= bambi.displayName || bambi.username %></a></h3>
              <p class="profile-description"><%= bambi.description || 'No description provided' %></p>
              <div class="profile-details">
                <span>Level: <%= bambi.level %></span>
                <span>
                  <i class="fas fa-heart" style="color: #ff4fa2;"></i> 
                  <%= bambi.hearts ? bambi.hearts.count : 0 %>
                </span>
                <span>Triggers: <%= bambi.triggers.length %></span>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
      
      <!-- Pagination -->
      <% if (locals.totalPages && totalPages > 1) { %>
        <div class="pagination">
          <% if (currentPage > 1) { %>
            <a href="/bambis?page=<%= currentPage - 1 %>">Previous</a>
          <% } %>
          
          <% for (let i = 1; i <= totalPages; i++) { %>
            <% if (i === currentPage) { %>
              <span class="active"><%= i %></span>
            <% } else { %>
              <a href="/bambis?page=<%= i %>"><%= i %></a>
            <% } %>
          <% } %>
          
          <% if (currentPage < totalPages) { %>
            <a href="/bambis?page=<%= currentPage + 1 %>">Next</a>
          <% } %>
        </div>
      <% } %>
    <% } else if (!locals.error) { %>
      <div class="empty-state">
        <p>No bambi profiles found. Be the first to create one!</p>
      </div>
    <% } %>
  </main>
  
  <%- include('../views/partials/footer.ejs') %>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('createProfileForm');
      const usernameField = document.getElementById('username');
      const displayNameField = document.getElementById('displayName');
      const descriptionField = document.getElementById('description');
      const charCounter = document.createElement('div');
      const usernameMessage = document.createElement('div');
      
      // Add validation message containers
      usernameMessage.className = 'validation-message';
      usernameMessage.style.fontSize = '0.8rem';
      usernameMessage.style.marginTop = '0.25rem';
      usernameField.parentNode.appendChild(usernameMessage);
      
      // Add character counter
      charCounter.className = 'char-counter';
      charCounter.style.textAlign = 'right';
      charCounter.style.fontSize = '0.8rem';
      charCounter.style.color = 'var(--text-muted)';
      descriptionField.parentNode.appendChild(charCounter);
      
      // Validation flags
      let isUsernameValid = false;
      let isDescriptionValid = true;
      
      // Validate username format
      function validateUsernameFormat(username) {
        const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;
        return usernameRegex.test(username);
      }
      
      // Check username uniqueness via API
      async function checkUsernameUniqueness(username) {
        try {
          const response = await fetch(`/bambis/api/check-username?username=${encodeURIComponent(username)}`);
          const data = await response.json();
          return data.available;
        } catch (error) {
          console.error('Error checking username:', error);
          return false;
        }
      }
      
      // Validate username with debounce
      let usernameTimer;
      usernameField.addEventListener('input', function() {
        clearTimeout(usernameTimer);
        
        const username = this.value.trim();
        
        // Reset validation
        isUsernameValid = false;
        
        // Check basic format first
        if (!validateUsernameFormat(username)) {
          usernameMessage.textContent = 'Username must be 3-20 characters using only letters, numbers, and underscores';
          usernameMessage.style.color = 'var(--error)';
          return;
        }
        
        usernameMessage.textContent = 'Checking username availability...';
        usernameMessage.style.color = 'var(--text-muted)';
        
        // Debounce API call
        usernameTimer = setTimeout(async () => {
          const isAvailable = await checkUsernameUniqueness(username);
          
          if (isAvailable) {
            usernameMessage.textContent = 'Username is available';
            usernameMessage.style.color = 'green';
            isUsernameValid = true;
          } else {
            usernameMessage.textContent = 'Username is already taken';
            usernameMessage.style.color = 'var(--error)';
            isUsernameValid = false;
          }
          
          updateSubmitButton();
        }, 500);
      });
      
      // Validate display name
      displayNameField.addEventListener('input', function() {
        const displayName = this.value.trim();
        if (displayName.length > 50) {
          this.value = displayName.substring(0, 50);
        }
      });
      
      // Update character count function
      function updateCharCount() {
        const remaining = 500 - descriptionField.value.length;
        charCounter.textContent = `${remaining} characters remaining`;
        
        if (remaining < 0) {
          charCounter.style.color = 'var(--error)';
          isDescriptionValid = false;
        } else {
          charCounter.style.color = 'var(--text-muted)';
          isDescriptionValid = true;
        }
        
        updateSubmitButton();
      }
      
      // Enable/disable submit button based on form validity
      function updateSubmitButton() {
        const submitButton = form.querySelector('button[type="submit"]');
        
        if (isUsernameValid && isDescriptionValid) {
          submitButton.disabled = false;
          submitButton.style.opacity = '1';
        } else {
          submitButton.disabled = true;
          submitButton.style.opacity = '0.5';
        }
      }
      
      // Add event listeners
      descriptionField.addEventListener('input', updateCharCount);
      updateCharCount(); // Initial count
      
      // Update submit button state initially
      updateSubmitButton();
      
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Final validation check
        if (!isUsernameValid) {
          alert('Please enter a valid username');
          return;
        }
        
        if (!isDescriptionValid) {
          alert('Description cannot exceed 500 characters');
          return;
        }
        
        const formData = {
          username: usernameField.value.trim(),
          displayName: displayNameField.value.trim(),
          description: descriptionField.value.trim()
        };
        
        try {
          const response = await fetch('/bambis/api/profile', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });
          
          const result = await response.json();
          
          if (result.success) {
            window.location.href = `/bambis/${result.data.username}`;
          } else {
            alert(result.message || 'Failed to create profile');
          }
        } catch (error) {
          console.error('Error creating profile:', error);
          alert('An error occurred while creating your profile');
        }
      });
    });
  </script>
</body>
</html>