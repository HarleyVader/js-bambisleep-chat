<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../views/partials/head.ejs') %>
    <title>BambiSleep Community Profiles</title>
    <%- include('../views/partials/bambi-styles.ejs') %> 
</head>
<body>
    <%- include('../views/partials/nav.ejs') %>
    
    <div class="container">
        <div class="page-header">
            <h1>BambiSleep Community</h1>
            <p class="subtitle">Connect with other Bambis and explore the forest together</p>
        </div>
        
        <div class="create-profile-section">
            <h2>Join Our Community</h2>
            <p>Share your journey into blissful mindlessness with others</p>
            
            <button id="join-community-btn" class="join-community-btn">Join the Community</button>
            
            <div id="profile-modal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>How would you like to proceed?</h2>
                    <div class="modal-buttons">
                        <button id="login-btn">I Already Have a Profile</button>
                        <button id="register-btn">Create New Profile</button>
                    </div>
                </div>
            </div>
            
            <form id="create-profile-form" style="margin-top: 20px; display: none;">
                <input type="text" id="bambiname-input" placeholder="Your BambiName" required>
                <button type="submit">Create Profile</button>
            </form>
            
            <p style="margin-top: 10px;">Already have a BambiName? <a href="#" id="check-profile-link">Check if you have a profile</a></p>
        </div>
        
        <div class="filter-controls">
            <div class="search-box">
                <input type="text" id="bambi-search" placeholder="Search Bambis...">
                <button id="search-btn"><i class="fas fa-search"></i></button>
            </div>
            <div class="sort-options">
                <select id="sort-bambis">
                    <option value="active">Recently Active</option>
                    <option value="hearts">Most Hearts</option>
                    <option value="followers">Most Followers</option>
                    <option value="level">Highest Level</option>
                </select>
            </div>
        </div>
        
        <div class="bambis-grid">
            <% if (bambis && bambis.length > 0) { %>
                <% bambis.forEach(bambi => { %>
                    <%- include('../views/partials/profile-card', { bambi: bambi }) %>
                <% }); %>
            <% } else { %>
                <div class="no-profiles-message">
                    <p>No bambi profiles found. Be the first to create one!</p>
                </div>
            <% } %>
        </div>
        
        <div id="load-more-container" class="text-center" style="margin-top: 30px; display: <%= bambis && bambis.length >= 20 ? 'block' : 'none' %>;">
            <button id="load-more-btn" class="btn">Load More Bambis</button>
        </div>
    </div>
    
    <%- include('../views/partials/footer.ejs') %>
    
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/socket-client.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Modal elements
            const modal = document.getElementById('profile-modal');
            const joinBtn = document.getElementById('join-community-btn');
            const closeBtn = document.querySelector('.close');
            const loginBtn = document.getElementById('login-btn');
            const registerBtn = document.getElementById('register-btn');
            const checkProfileLink = document.getElementById('check-profile-link');
            const createProfileForm = document.getElementById('create-profile-form');
            const searchInput = document.getElementById('bambi-search');
            const sortSelect = document.getElementById('sort-bambis');
            const loadMoreBtn = document.getElementById('load-more-btn');
            
            let currentPage = 1;
            let currentSort = 'active';
            let currentSearch = '';
            
            // Show modal when join button is clicked
            joinBtn?.addEventListener('click', function() {
                modal.style.display = 'block';
            });
            
            // Close modal when X is clicked
            closeBtn?.addEventListener('click', function() {
                modal.style.display = 'none';
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Login button redirects to login.ejs
            loginBtn?.addEventListener('click', function() {
                window.location.href = '/login?redirect=' + encodeURIComponent('/bambis/profile');
            });
            
            // Register button redirects to registration.ejs - FIX URL PATH
            registerBtn?.addEventListener('click', function() {
                window.location.href = `/bambis/register?template=bambi&redirect=${encodeURIComponent('/bambis/profile')}`;
            });
            
            // Show profile check form
            checkProfileLink?.addEventListener('click', function(e) {
                e.preventDefault();
                createProfileForm.style.display = 'flex';
                joinBtn.style.display = 'none';
            });
            
            // Search functionality
            let searchTimeout;
            searchInput?.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    currentSearch = searchInput.value.trim();
                    currentPage = 1;
                    fetchBambis();
                }, 500);
            });
            
            // Sort functionality
            sortSelect?.addEventListener('change', function() {
                currentSort = this.value;
                currentPage = 1;
                fetchBambis();
            });
            
            // Load more functionality
            loadMoreBtn?.addEventListener('click', function() {
                currentPage++;
                fetchBambis(true); // Append instead of replace
            });
            
            // Handle profile check/creation
            createProfileForm?.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const bambiname = document.getElementById('bambiname-input').value.trim();
                if (!bambiname) return;
                
                // Validate bambiname (alphanumeric + spaces, 3-30 chars)
                const nameRegex = /^[a-zA-Z0-9 ]{3,30}$/;
                if (!nameRegex.test(bambiname)) {
                    alert('BambiName must be 3-30 characters with only letters, numbers and spaces.');
                    return;
                }
                
                try {
                    // Check if profile exists using our socket client
                    const data = await bambiSocket.checkProfile(bambiname);
                    
                    if (data.exists) {
                        // Profile exists - set cookie and redirect to login.ejs
                        document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                        window.location.href = `/login?redirect=${encodeURIComponent('/bambis/profile')}`;
                    } else {
                        // No profile - set cookie and redirect to registration.ejs with template parameter
                        document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                        // FIX THE URL HERE TO USE THE CORRECT PATH
                        window.location.href = `/bambis/register?template=bambi&redirect=${encodeURIComponent('/bambis/profile')}`;
                    }
                } catch (error) {
                    console.error('Error checking profile:', error);
                    // Default to registration if check fails - FIX THIS URL TOO
                    document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                    window.location.href = `/bambis/register?template=bambi&redirect=${encodeURIComponent('/bambis/profile')}`;
                }
            });
            
            // Heart functionality using event delegation
            document.querySelector('.bambis-grid')?.addEventListener('click', function(e) {
                // Find closest heart button if it was clicked or a child of it
                const heartButton = e.target.closest('.heart-button');
                if (!heartButton) return;
                
                e.preventDefault();
                const username = heartButton.dataset.username;
                const isActive = heartButton.classList.contains('active');
                
                // Use our unified socket client
                bambiSocket.toggleHeart(username, isActive);
            });
            
            // Async function to fetch bambis from the server
            async function fetchBambis(append = false) {
                try {
                    const url = `/bambis/api/list?page=${currentPage}&sort=${currentSort}&search=${encodeURIComponent(currentSearch)}`;
                    const response = await fetch(url);
                    const data = await response.json();
                    
                    if (data.success) {
                        const bambisGrid = document.querySelector('.bambis-grid');
                        
                        // Either append new results or replace existing ones
                        if (append) {
                            // Append new results
                            data.bambis.forEach(bambi => {
                                addProfileCard(bambi);
                            });
                        } else {
                            // Replace existing results
                            bambisGrid.innerHTML = '';
                            if (data.bambis.length === 0) {
                                bambisGrid.innerHTML = `
                                    <div class="no-profiles-message">
                                        <p>No bambis match your search criteria.</p>
                                    </div>
                                `;
                            } else {
                                data.bambis.forEach(bambi => {
                                    addProfileCard(bambi);
                                });
                            }
                        }
                        
                        // Show/hide load more button
                        const loadMoreContainer = document.getElementById('load-more-container');
                        loadMoreContainer.style.display = data.hasMore ? 'block' : 'none';
                    }
                } catch (error) {
                    console.error('Error fetching bambis:', error);
                }
            }
            
            // Register socket event handlers
            bambiSocket
                .on('profile:hearted', data => {
                    updateHeartUI(data.username, data.count, data.hearted);
                })
                .on('profile:created', data => {
                    addProfileCard(data.bambi);
                })
                .on('profile:updated', data => {
                    updateProfileCard(data.username, data.bambi);
                });
            
            // Function to update heart UI
            function updateHeartUI(username, count, hearted) {
                const heartStat = document.querySelector(`.heart-stat[data-username="${username}"]`);
                if (heartStat) {
                    const heartButton = heartStat.querySelector('.heart-button');
                    const heartCount = heartStat.querySelector('.heart-count');
                    
                    if (heartButton) {
                        heartButton.classList.toggle('active', hearted);
                    }
                    
                    if (heartCount) {
                        heartCount.textContent = count;
                    }
                }
            }
            
            // Function to add a new profile card to the grid
            function addProfileCard(bambi) {
                const bambisGrid = document.querySelector('.bambis-grid');
                if (!bambisGrid) return;
                
                // Remove "no profiles" message if it exists
                const noProfilesMsg = bambisGrid.querySelector('.no-profiles-message');
                if (noProfilesMsg) {
                    noProfilesMsg.remove();
                }
                
                // Create new profile card using template function
                const templateHtml = createProfileCardHTML(bambi);
                
                // Create a temporary container
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = templateHtml;
                
                // Get the profile card from the container
                const profileCard = tempContainer.firstElementChild;
                
                // Add the card to the grid
                bambisGrid.appendChild(profileCard);
            }
            
            // Function to create profile card HTML
            function createProfileCardHTML(bambi) {
                return `
                    <div class="profile-card" style="background-color: ${bambi.profileTheme?.primaryColor || 'var(--transparent)'}" data-username="${bambi.username}">
                        <div class="profile-avatar">
                            <img src="${bambi.profilePictureUrl}" alt="${bambi.displayName || bambi.username}">
                        </div>
                        <h3 class="profile-name" style="color: ${bambi.profileTheme?.textColor || 'var(--button-color)'}">
                            ${bambi.displayName || bambi.username}
                        </h3>
                        <div class="profile-stats">
                            <div class="stat">
                                <div class="stat-value">LVL ${bambi.level}</div>
                                <div class="stat-label">Level</div>
                            </div>
                            <div class="stat heart-stat" data-username="${bambi.username}">
                                <button class="heart-button" data-username="${bambi.username}">
                                    ❤️
                                </button>
                                <div class="stat-value heart-count">${bambi.hearts.count}</div>
                                <div class="stat-label">Hearts</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value">${bambi.followers.length}</div>
                                <div class="stat-label">Followers</div>
                            </div>
                        </div>
                        <div class="profile-description" style="color: ${bambi.profileTheme?.textColor || 'var(--primary-alt)'}">
                            ${bambi.description || 'A mysterious Bambi...'}
                        </div>
                        <div class="text-center">
                            <a href="/bambis/${bambi.username}" class="btn">View Profile</a>
                        </div>
                    </div>
                `;
            }
            
            // Function to update an existing profile card
            function updateProfileCard(username, bambi) {
                const profileCard = document.querySelector(`.profile-card[data-username="${username}"]`);
                if (!profileCard) return;
                
                // Update avatar
                const avatar = profileCard.querySelector('.profile-avatar img');
                if (avatar && bambi.profilePictureUrl) {
                    avatar.src = bambi.profilePictureUrl;
                }
                
                // Update name
                const name = profileCard.querySelector('.profile-name');
                if (name) {
                    name.textContent = bambi.displayName || bambi.username;
                    if (bambi.profileTheme?.textColor) {
                        name.style.color = bambi.profileTheme.textColor;
                    }
                }
                
                // Update level
                const level = profileCard.querySelector('.stat-value:first-child');
                if (level) {
                    level.textContent = `LVL ${bambi.level}`;
                }
                
                // Update followers
                const followers = profileCard.querySelector('.stat:last-child .stat-value');
                if (followers) {
                    followers.textContent = bambi.followers.length;
                }
                
                // Update description
                const description = profileCard.querySelector('.profile-description');
                if (description) {
                    description.textContent = bambi.description || 'A mysterious Bambi...';
                    if (bambi.profileTheme?.textColor) {
                        description.style.color = bambi.profileTheme.textColor;
                    }
                }
                
                // Update background color
                if (bambi.profileTheme?.primaryColor) {
                    profileCard.style.backgroundColor = bambi.profileTheme.primaryColor;
                }
            }
        });
    </script>
</body>
</html>