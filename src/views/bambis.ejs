<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../views/partials/head.ejs') %>
    <title>BambiSleep Community Profiles</title>
    <style>
        .bambis-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }
        
        .profile-card {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            padding: 20px;
        }
        
        .profile-card:hover {
            transform: translateY(-10px) scale(1.03);
            box-shadow: 0 0 25px var(--tertiary-color);
        }
        
        .profile-card:hover .profile-avatar img {
            transform: scale(1.1);
        }
        
        .profile-card:hover::before {
            opacity: 1;
        }
        
        .profile-card::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, var(--button-color), var(--tertiary-color), var(--nav-alt));
            z-index: -1;
            opacity: 0.7;
            transition: opacity 0.3s ease;
            border-radius: 10px;
            filter: blur(8px);
        }
        
        .profile-avatar {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            overflow: hidden;
            margin: 0 auto 1rem;
            border: 3px solid var(--tertiary-color);
            box-shadow: 0 0 15px var(--button-color);
        }
        
        .profile-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s ease;
        }
        
        .profile-name {
            text-align: center;
            margin-bottom: 0.5rem;
        }
        
        .profile-stats {
            display: flex;
            justify-content: space-around;
            margin-bottom: 1rem;
        }
        
        .stat {
            text-align: center;
        }
        
        .profile-description {
            font-style: italic;
            color: var(--primary-alt);
            text-align: center;
            margin-bottom: 1rem;
            padding: 0 1rem;
            max-height: 60px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }
        
        .create-profile-section {
            margin-bottom: 2rem;
            text-align: center;
        }
        
        #create-profile-form {
            display: flex;
            max-width: 500px;
            margin: 0 auto;
        }
        
        #bambiname-input {
            flex: 1;
            margin-right: 10px;
        }
        
        .join-community-btn {
            display: block;
            margin: 20px auto;
            padding: 12px 24px;
            font-size: 1.2rem;
            background-color: var(--tertiary-color);
            color: var(--secondary-color);
            border: 3px outset var(--secondary-color);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            animation: pulse 2s infinite;
            text-shadow: var(--tertiary-color) 0.3vw 0.3vw 0.3vw;
        }
        
        .join-community-btn:hover {
            transform: scale(1.05);
            background-color: var(--secondary-color);
            color: var(--tertiary-color);
            border: 3px inset var(--tertiary-color);
        }
        
        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(204, 1, 116, 0.7); }
            70% { box-shadow: 0 0 0 15px rgba(204, 1, 116, 0); }
            100% { box-shadow: 0 0 0 0 rgba(204, 1, 116, 0); }
        }
        
        .heart-button {
            background-color: transparent;
            border: none;
            color: var(--button-color);
            font-size: 1.5rem;
            cursor: pointer;
            transition: transform 0.3s ease;
            animation: none;
        }
        
        .heart-button:hover {
            transform: scale(1.2);
        }
        
        .heart-button.active {
            color: var(--tertiary-color);
            animation: heartbeat 1s infinite;
        }
        
        @keyframes heartbeat {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }
        
        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
        }
        
        .modal-content {
            background-color: var(--primary-color);
            margin: 15% auto;
            padding: 20px;
            border: 3px ridge var(--tertiary-color);
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
            box-shadow: 0 0 25px var(--button-color);
            text-align: center;
        }
        
        .modal-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 20px;
        }
        
        .close {
            color: var(--tertiary-color);
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: var(--button-color);
        }
    </style>
</head>
<body>
    <%- include('../views/partials/nav.ejs') %>
    
    <div class="container">
        <h1>BambiSleep Community</h1>
        
        <div class="create-profile-section">
            <h2>Join Our Community</h2>
            <p>Connect with other Bambis and share your journey in the forest</p>
            
            <button id="join-community-btn" class="join-community-btn">Join the Community</button>
            
            <div id="profile-modal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <h2>How would you like to proceed?</h2>
                    <div class="modal-buttons">
                        <button id="login-btn">I Already Have a Profile</button>
                        <button id="register-btn">Create New Profile</button>
                    </div>
                </div>
            </div>
            
            <form id="create-profile-form" style="margin-top: 20px; display: none;">
                <input type="text" id="bambiname-input" placeholder="Your BambiName" required>
                <button type="submit">Create Profile</button>
            </form>
            
            <p style="margin-top: 10px;">Already have a BambiName? <a href="#" id="check-profile-link">Check if you have a profile</a></p>
        </div>
        
        <div class="bambis-grid">
            <% if (bambis && bambis.length > 0) { %>
                <% bambis.forEach(bambi => { %>
                    <div class="profile-card" style="background-color: <%= bambi.profileTheme?.primaryColor || 'var(--transparent)' %>;" data-username="<%= bambi.username %>">
                        <div class="profile-avatar">
                            <img src="<%= bambi.profilePictureUrl %>" alt="<%= bambi.displayName || bambi.username %>">
                        </div>
                        <h3 class="profile-name" style="color: <%= bambi.profileTheme?.textColor || 'var(--button-color)' %>">
                            <%= bambi.displayName || bambi.username %>
                        </h3>
                        <div class="profile-stats">
                            <div class="stat">
                                <div class="stat-value">LVL <%= bambi.level %></div>
                                <div class="stat-label">Level</div>
                            </div>
                            <div class="stat heart-stat" data-username="<%= bambi.username %>">
                                <button class="heart-button <% if (bambi.userHasLiked) { %>active<% } %>" data-username="<%= bambi.username %>">
                                    ❤️
                                </button>
                                <div class="stat-value heart-count"><%= bambi.hearts.count %></div>
                                <div class="stat-label">Hearts</div>
                            </div>
                            <div class="stat">
                                <div class="stat-value"><%= bambi.followers.length %></div>
                                <div class="stat-label">Followers</div>
                            </div>
                        </div>
                        <div class="profile-description" style="color: <%= bambi.profileTheme?.textColor || 'var(--primary-alt)' %>">
                            <%= bambi.description || 'A mysterious Bambi...' %>
                        </div>
                        <div class="text-center">
                            <a href="/bambis/<%= bambi.username %>" class="btn">View Profile</a>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="no-profiles-message">
                    <p>No bambi profiles found. Be the first to create one!</p>
                </div>
            <% } %>
        </div>
    </div>
    
    <%- include('../views/partials/footer.ejs') %>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Connect to Socket.io
            const socket = io();
            
            // Modal elements
            const modal = document.getElementById('profile-modal');
            const joinBtn = document.getElementById('join-community-btn');
            const closeBtn = document.querySelector('.close');
            const loginBtn = document.getElementById('login-btn');
            const registerBtn = document.getElementById('register-btn');
            const checkProfileLink = document.getElementById('check-profile-link');
            const createProfileForm = document.getElementById('create-profile-form');
            
            // Show modal when join button is clicked
            joinBtn.addEventListener('click', function() {
                modal.style.display = 'block';
            });
            
            // Close modal when X is clicked
            closeBtn.addEventListener('click', function() {
                modal.style.display = 'none';
            });
            
            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
            
            // Login button redirects to login.ejs
            loginBtn.addEventListener('click', function() {
                window.location.href = '/login?redirect=' + encodeURIComponent('/bambis/profile');
            });
            
            // Register button redirects to registration.ejs
            registerBtn.addEventListener('click', function() {
                window.location.href = '/register';
            });
            
            // Show profile check form
            checkProfileLink.addEventListener('click', function(e) {
                e.preventDefault();
                createProfileForm.style.display = 'flex';
                joinBtn.style.display = 'none';
            });
            
            // Handle profile check/creation
            createProfileForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const bambiname = document.getElementById('bambiname-input').value.trim();
                if (!bambiname) return;
                
                // Validate bambiname (alphanumeric + spaces, 3-30 chars)
                const nameRegex = /^[a-zA-Z0-9 ]{3,30}$/;
                if (!nameRegex.test(bambiname)) {
                    alert('BambiName must be 3-30 characters with only letters, numbers and spaces.');
                    return;
                }
                
                try {
                    // Check if profile exists
                    const response = await fetch(`/bambis/api/check-profile/${encodeURIComponent(bambiname)}`);
                    const data = await response.json();
                    
                    if (data.exists) {
                        // Profile exists - set cookie and redirect to login.ejs
                        document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                        window.location.href = `/login?redirect=${encodeURIComponent('/bambis/profile')}`;
                    } else {
                        // No profile - set cookie and redirect to registration.ejs with template parameter
                        document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                        window.location.href = `/register?template=bambi&redirect=${encodeURIComponent('/bambis/profile')}`;
                    }
                } catch (error) {
                    console.error('Error checking profile:', error);
                    // Default to registration if check fails
                    document.cookie = `bambiname=${encodeURIComponent(bambiname)}; path=/`;
                    window.location.href = `/register?template=bambi&redirect=${encodeURIComponent('/bambis/profile')}`;
                }
            });
            
            // Heart functionality
            document.querySelectorAll('.heart-button').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    const username = this.dataset.username;
                    
                    // Emit heart/unheart action via socket instead of fetch
                    socket.emit('profile:heart', {
                        username: username,
                        action: this.classList.contains('active') ? 'unheart' : 'heart'
                    });
                });
            });
            
            // Listen for real-time updates
            socket.on('profile:hearted', data => {
                updateHeartUI(data.username, data.count, data.hearted);
            });
            
            socket.on('profile:created', data => {
                // Add the new profile card to the grid without page reload
                addProfileCard(data.bambi);
            });
            
            socket.on('profile:updated', data => {
                // Find and update the profile card if it exists on this page
                updateProfileCard(data.username, data.bambi);
            });
            
            // Function to update heart UI
            function updateHeartUI(username, count, hearted) {
                const heartStat = document.querySelector(`.heart-stat[data-username="${username}"]`);
                if (heartStat) {
                    const heartButton = heartStat.querySelector('.heart-button');
                    const heartCount = heartStat.querySelector('.heart-count');
                    
                    if (heartButton) {
                        heartButton.classList.toggle('active', hearted);
                    }
                    
                    if (heartCount) {
                        heartCount.textContent = count;
                    }
                }
            }
            
            // Function to add a new profile card to the grid
            function addProfileCard(bambi) {
                const bambisGrid = document.querySelector('.bambis-grid');
                if (!bambisGrid) return;
                
                // Remove "no profiles" message if it exists
                const noProfilesMsg = bambisGrid.querySelector('.no-profiles-message');
                if (noProfilesMsg) {
                    noProfilesMsg.remove();
                }
                
                // Create new profile card
                const profileCard = document.createElement('div');
                profileCard.className = 'profile-card';
                profileCard.setAttribute('data-username', bambi.username);
                if (bambi.profileTheme?.primaryColor) {
                    profileCard.style.backgroundColor = bambi.profileTheme.primaryColor;
                }
                
                // Fill in the profile card HTML
                profileCard.innerHTML = `
                    <div class="profile-avatar">
                        <img src="${bambi.profilePictureUrl}" alt="${bambi.displayName || bambi.username}">
                    </div>
                    <h3 class="profile-name" style="color: ${bambi.profileTheme?.textColor || 'var(--button-color)'}">
                        ${bambi.displayName || bambi.username}
                    </h3>
                    <div class="profile-stats">
                        <div class="stat">
                            <div class="stat-value">LVL ${bambi.level}</div>
                            <div class="stat-label">Level</div>
                        </div>
                        <div class="stat heart-stat" data-username="${bambi.username}">
                            <button class="heart-button" data-username="${bambi.username}">
                                ❤️
                            </button>
                            <div class="stat-value heart-count">${bambi.hearts.count}</div>
                            <div class="stat-label">Hearts</div>
                        </div>
                        <div class="stat">
                            <div class="stat-value">${bambi.followers.length}</div>
                            <div class="stat-label">Followers</div>
                        </div>
                    </div>
                    <div class="profile-description" style="color: ${bambi.profileTheme?.textColor || 'var(--primary-alt)'}">
                        ${bambi.description || 'A mysterious Bambi...'}
                    </div>
                    <div class="text-center">
                        <a href="/bambis/${bambi.username}" class="btn">View Profile</a>
                    </div>
                `;
                
                // Add the card to the grid
                bambisGrid.appendChild(profileCard);
                
                // Add event listener to the new heart button
                const heartButton = profileCard.querySelector('.heart-button');
                if (heartButton) {
                    heartButton.addEventListener('click', function(e) {
                        e.preventDefault();
                        socket.emit('profile:heart', {
                            username: this.dataset.username,
                            action: this.classList.contains('active') ? 'unheart' : 'heart'
                        });
                    });
                }
            }
            
            // Function to update an existing profile card
            function updateProfileCard(username, bambi) {
                const profileCard = document.querySelector(`.profile-card[data-username="${username}"]`);
                if (!profileCard) return;
                
                // Update avatar
                const avatar = profileCard.querySelector('.profile-avatar img');
                if (avatar && bambi.profilePictureUrl) {
                    avatar.src = bambi.profilePictureUrl;
                }
                
                // Update name
                const name = profileCard.querySelector('.profile-name');
                if (name) {
                    name.textContent = bambi.displayName || bambi.username;
                    if (bambi.profileTheme?.textColor) {
                        name.style.color = bambi.profileTheme.textColor;
                    }
                }
                
                // Update level
                const level = profileCard.querySelector('.stat-value:first-child');
                if (level) {
                    level.textContent = `LVL ${bambi.level}`;
                }
                
                // Update hearts (already handled by updateHeartUI)
                
                // Update followers
                const followers = profileCard.querySelector('.stat:last-child .stat-value');
                if (followers) {
                    followers.textContent = bambi.followers.length;
                }
                
                // Update description
                const description = profileCard.querySelector('.profile-description');
                if (description) {
                    description.textContent = bambi.description || 'A mysterious Bambi...';
                    if (bambi.profileTheme?.textColor) {
                        description.style.color = bambi.profileTheme.textColor;
                    }
                }
                
                // Update background color
                if (bambi.profileTheme?.primaryColor) {
                    profileCard.style.backgroundColor = bambi.profileTheme.primaryColor;
                }
            }
        });
    </script>
</body>
</html>