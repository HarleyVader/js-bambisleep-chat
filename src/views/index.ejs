<!DOCTYPE html>
<html lang="en">
<%- include('../views/partials/head.ejs') %>
  <title>BambiSleep.Chat AIGF</title>

  <body>
    <%- include('../views/partials/nav.ejs') %>
      <div id="chat-container">
        <!-- Add modal for username prompt -->
        <div id="username-modal" class="modal">
          <div class="modal-content">
          </div>
        </div>
        <div id="user-input">
          <h1>BambiSleep AIGF üëÅÔ∏è</h1>
          <div id="llm">
          </div>
          <br>
          <div id="system-controls-container">
            <!-- Include system controls directly -->
            <% if (locals.profile) { %>
              <%- include('../views/partials/profile-system-controls.ejs', { profile: locals.profile }) %>
            <% } else { %>
              <!-- Simplified default version when no profile is available -->
              <div class="system-controls">
                <div class="control-buttons">
                  <button id="triggers-btn" class="control-btn active" data-target="trigger-panel">Triggers</button>
                  <button id="collar-btn" class="control-btn" data-target="collar-panel">Collar</button>
                </div>
                
                <div class="control-panels">
                  <div id="trigger-panel" class="control-panel active">
                    <div id="trigger-toggles" class="trigger-toggles">
                      <!-- Triggers will be populated by JavaScript -->
                      <p>Loading triggers...</p>
                    </div>
                  </div>
                  
                  <div id="collar-panel" class="control-panel">
                    <div class="collar-container">
                      <label for="collar-text">Collar Text:</label>
                      <input type="text" id="collar-text" placeholder="Enter collar text...">
                      <div class="collar-buttons">
                        <button id="collar-enable-btn">Enable Collar</button>
                        <button id="collar-save-btn">Save Text</button>
                      </div>
                    </div>
                  </div>
                </div>
                
                <!-- Add XP progress bar -->
                <div class="xp-progress-container">
                  <span class="xp-progress-label">Level: 0 | XP: 0/100</span>
                  <div class="xp-progress-bar">
                    <div class="xp-progress-fill" style="width: 0%"></div>
                  </div>
                </div>
              </div>
            <% } %>
          </div>
        </div>
        <div id="response-container">
          <div id="response-chat-wrapper">
            <div id="chat-response" class="chat-response">
              <!-- Replace server-rendered chat messages with client-side placeholder -->
              <div data-client-render="ChatMessages" data-props='{"messages": []}'></div>
            </div>
          </div>
          <div id="eyeCursorContainer">
            <div id="eyeCursor">
              <div id="eyeCursorText"></div>
              <div id="eyeCursorText2"></div>
              <div id="eye" aria-label="Eye Cursor"></div>
              <div id="eyeCursorText3"></div>
              <div id="eyeCursorText4"></div>
            </div>
          </div>
        </div>
      </div>
      <%- include('../views/partials/footer.ejs') %>
        <!-- Make sure these scripts appear in exactly this order -->
        <script src="/socket.io/socket.io.js"></script>
        <script src="js/aigf-core.js"></script>
        <script src="js/psychodelic-trigger-mania.js"></script>
        <script src="js/text2speech.js"></script>
        <script src="js/responsive.js"></script>
        <script src="js/triggers.js"></script>
        <script>
          document.addEventListener("DOMContentLoaded", () => {
            // Initialize system controls
            setupSystemControls();
            
            // Function to activate triggers from profile
            function activateProfileTriggers() {
              // Get username from window global set in aigf-core.js
              const username = window.username || '';
              
              if (!username) {
                console.warn('No username available, cannot activate triggers');
                return;
              }
              
              // Fetch profile data from the API
              fetch(`/api/profile/${username}/system-controls`)
                .then(response => {
                  if (!response.ok) {
                    throw new Error(`HTTP error ${response.status}`);
                  }
                  return response.json();
                })
                .then(data => {
                  if (data && data.activeTriggers) {
                    const activeTriggers = data.activeTriggers;
                    if (activeTriggers && activeTriggers.length > 0) {
                      console.log('Fetched and activating triggers:', activeTriggers);
                      
                      // Activate each trigger
                      activeTriggers.forEach(trigger => {
                        // Use the toggleTrigger function from triggers.js
                        if (typeof toggleTrigger === 'function') {
                          toggleTrigger(trigger, true);
                        }
                        
                        // Create a custom event as fallback
                        const event = new CustomEvent('bambi-trigger', {
                          detail: { trigger, active: true }
                        });
                        document.dispatchEvent(event);
                      });
                    }
                  }
                })
                .catch(error => console.error('Error fetching profile data:', error));
            }
            
            // Setup system controls when DOM is loaded
            function setupSystemControls() {
              const controlBtns = document.querySelectorAll('.control-btn');
              const controlPanels = document.querySelectorAll('.control-panel');
              
              // Handle button clicks to show different panels
              controlBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                  const target = btn.getAttribute('data-target');
                  
                  // Update active button
                  controlBtns.forEach(b => b.classList.remove('active'));
                  btn.classList.add('active');
                  
                  // Show target panel, hide others
                  controlPanels.forEach(panel => {
                    if (panel.id === target) {
                      panel.classList.add('active');
                    } else {
                      panel.classList.remove('active');
                    }
                  });
                });
              });
              
              // Handle collar enable button
              const collarEnableBtn = document.getElementById('collar-enable-btn');
              if (collarEnableBtn) {
                collarEnableBtn.addEventListener('click', () => {
                  const isEnabled = collarEnableBtn.classList.contains('active');
                  
                  // Toggle state
                  collarEnableBtn.classList.toggle('active');
                  collarEnableBtn.textContent = isEnabled ? 'Enable Collar' : 'Disable Collar';
                  
                  // Emit to server if socket is connected
                  if (typeof socket !== 'undefined' && socket.connected) {
                    socket.emit('update-system-controls', {
                      username: window.username,
                      collarEnabled: !isEnabled
                    });
                  }
                });
              }
              
              // Handle collar save button
              const collarSaveBtn = document.getElementById('collar-save-btn');
              const collarTextInput = document.getElementById('collar-text');
              
              if (collarSaveBtn && collarTextInput) {
                collarSaveBtn.addEventListener('click', () => {
                  const collarText = collarTextInput.value.trim();
                  
                  // Emit to server if socket is connected
                  if (typeof socket !== 'undefined' && socket.connected) {
                    socket.emit('update-system-controls', {
                      username: window.username,
                      collarText: collarText
                    });
                    
                    // Provide feedback
                    collarSaveBtn.textContent = 'Saved!';
                    setTimeout(() => {
                      collarSaveBtn.textContent = 'Save Text';
                    }, 2000);
                  }
                });
              }
            }
            
            // Call activateProfileTriggers when socket is connected
            if (typeof socket !== 'undefined') {
              socket.on('connect', function() {
                // Wait a bit to ensure everything is loaded
                setTimeout(activateProfileTriggers, 1000);
                
                // Also refresh system controls when we connect
                if (typeof window.username !== 'undefined') {
                  // Fetch current system controls state
                  fetch(`/api/profile/${window.username}/system-controls`)
                    .then(response => response.json())
                    .then(data => {
                      // Update collar text
                      const collarTextInput = document.getElementById('collar-text');
                      if (collarTextInput && data.systemControls && data.systemControls.collarText) {
                        collarTextInput.value = data.systemControls.collarText;
                      }
                      
                      // Update collar enable button
                      const collarEnableBtn = document.getElementById('collar-enable-btn');
                      if (collarEnableBtn && data.systemControls && data.systemControls.collarEnabled) {
                        collarEnableBtn.classList.add('active');
                        collarEnableBtn.textContent = 'Disable Collar';
                      }
                      
                      // Update XP display
                      updateXpDisplay(data.xp || 0, data.level || 0);
                    })
                    .catch(error => console.error('Error fetching system controls:', error));
                }
              });
            } else {
              // Fallback if socket is not available
              setTimeout(activateProfileTriggers, 2000);
            }
            
            // Function to update XP display
            function updateXpDisplay(xp, level) {
              const xpProgressLabel = document.querySelector('.xp-progress-label');
              const xpProgressFill = document.querySelector('.xp-progress-fill');
              
              if (xpProgressLabel && xpProgressFill) {
                // Calculate next level XP requirement (simple formula: level^2 * 100)
                const nextLevelXP = Math.pow(level + 1, 2) * 100;
                
                // Calculate progress percentage
                const progress = Math.min(100, Math.max(0, (xp / nextLevelXP) * 100));
                
                // Update display
                xpProgressLabel.textContent = `Level: ${level} | XP: ${xp}/${nextLevelXP}`;
                xpProgressFill.style.width = `${progress}%`;
              }
            }
          });
        </script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js"></script>
        <script src="js/bootstrap.min.js"></script>
  </body>
</html>