<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head.ejs', { title: 'BambiSleep.Chat AIGF' }) %>
<body>
  <%- include('./partials/nav.ejs') %>
  
  <div class="container">
    <% if (typeof error !== 'undefined' && error) { %>
      <div class="error-message">
        <%= typeof errorMessage !== 'undefined' ? errorMessage : 'An error occurred' %>
      </div>
    <% } %>
    
    <div id="chat-container">
      <!-- Add modal for username prompt -->
      <div id="username-modal" class="modal">
        <div class="modal-content">
          <p>give me your bambi name:</p>
          <input type="text" id="username-input" placeholder="Enter username">
          <button id="username-submit">Submit</button>
        </div>
      </div>
      <div id="user-input">
        <h1>BambiSleep AIGF üëÅÔ∏è</h1>
        <div id="llm">
          <form id="llm-form">
            <textarea id="textarea" oninput="autoExpand(this)" placeholder="Prompt my AIGF"></textarea>
            <button id="submit" type="submit">Send</button>
          </form>
          <div id="user-prompt"></div>
          <div id="audiomessage">
            <audio id="audio" hidden controls></audio>
            <p id="message"></p>
            <p id="error-message" style="display: none; color: red;"></p>
          </div>
        </div>
        <br>
        <div id="system-controls-container">
          <%- include('./partials/system-controls.ejs', { validConstantsCount: validConstantsCount }) %>
        </div>
      </div>
      <div id="response-container">
        <div id="response-chat-wrapper">
          <div id="response"></div>
          <div id="chat">
            <form id="chat-form">
              <textarea id="textarea-chat" oninput="autoExpand(this)" placeholder="Send in Chat"></textarea>
              <button id="send" type="submit" class="send-btn">Chat</button>
            </form>
            <ul id="chat-response"></ul>
          </div>
        </div>
        <div id="eyeCursorContainer">
          <div id="eyeCursor">
            <div id="eyeCursorText"></div>
            <div id="eyeCursorText2"></div>
            <div id="eye" aria-label="Eye Cursor"></div>
            <div id="eyeCursorText3"></div>
            <div id="eyeCursorText4"></div>
          </div>
        </div>
      </div>
    </div>
    
  </div>

  <%- include('./partials/footer.ejs', { footer: typeof footer !== 'undefined' ? footer : {} }) %>
  
  <script src="/socket.io/socket.io.js"></script>
  <script type="module" src="/js/socket-client.js"></script>
  <script src="js/psychodelic-trigger-mania.js"></script>
  <script src="js/text2speech.js"></script>
  <script src="js/responsive.js"></script>
  <script src="js/triggers.js"></script>
  <script type="module" src="/js/aigf-core.js"></script>
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const submitButton = document.getElementById('username-submit');
      const usernameInput = document.getElementById('username-input');
      const modal = document.getElementById('username-modal');

      submitButton.addEventListener('click', () => {
        const username = usernameInput.value.trim();
        if (username) {
          modal.style.display = 'none';
          window.username = username;
        }
      });

      document.getElementById('username-input').addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault();
          submitButton.click();
        }
      });

      const style = document.createElement('style');
      document.head.appendChild(style);

      if (!window.BambiSocket) {
        console.error('BambiSocket not found. Make sure bambi-core.js is loaded.');
      } else {
        window.BambiSocket.initialize();
      }

      // Get socket from the BambiSocket object
      const socket = window.BambiSocket.getSocket();

      socket.on("connect", () => {
        socket.emit('get_chat_history', 20); // Get last 20 messages
      });

      socket.on("chat_history", (messages) => {
        const chatResponse = document.getElementById("chat-response");
        messages.forEach(msg => {
          const item = document.createElement("li");
          const timestamp = new Date(msg.timestamp).toLocaleTimeString();
          item.textContent = `/${timestamp} - /${msg.username}: /${msg.data}/`;
          chatResponse.appendChild(item);
        });
      });

      socket.on("chat message", (msg) => {
        const item = document.createElement("li");
        const timestamp = new Date(msg.timestamp).toLocaleTimeString();
        item.textContent = `/${timestamp} - /${msg.username}: /${msg.data}/`;
        if (timestamp && window.username) {
          item.classList.add("neon-glow");
        }
        document.getElementById("chat-response").appendChild(item);
      });

      document.getElementById("chat-form").addEventListener("submit", (event) => {
        event.preventDefault();
        const message = document.getElementById("textarea-chat").value;
        if (message) {
          socket.emit("chat message", { data: message, username: window.username });
          document.getElementById("textarea-chat").value = "";
        }
      });

      const collarForm = document.getElementById('collar-form');
      if (collarForm) {
        collarForm.addEventListener('submit', (event) => {
          event.preventDefault();
          const message = document.getElementById('textarea-collar').value.trim();
          if (message) {
            socket.emit('collar', { data: message, socketId: socket.id });
            const userCollar = document.getElementById('user-collar');
            const messageElement = document.createElement('p');
            messageElement.textContent = message;
            userCollar.appendChild(messageElement);
          }
        });
      }

      socket.on('collar', (message) => {
        const collarResponse = document.getElementById('textarea-collar-response');
        const messageElement = document.createElement('p');
        messageElement.textContent = message;
        if (collarResponse.firstChild) {
          collarResponse.insertBefore(messageElement, collarResponse.firstChild);
        } else {
          collarResponse.appendChild(messageElement);
        }
        applyUppercaseStyle();
      });
    });
  </script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js"></script>
  <script src="js/bootstrap.min.js"></script>
</body>
</html>