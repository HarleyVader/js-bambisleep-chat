<!DOCTYPE html>
<html lang="en">
<%- include('../views/partials/head.ejs') %>
  <title>BambiSleep.Chat AIGF</title>

  <body data-username="<%= locals.username || '' %>">
    <%- include('../views/partials/nav.ejs') %>
      <div id="chat-container">
        <!-- Add modal for username prompt -->
        <div id="username-modal" class="modal">
          <div class="modal-content">
            <p>give me your bambi name:</p>
            <input type="text" id="username-input" placeholder="Enter username">
            <button id="username-submit">Submit</button>
          </div>
        </div>
        <div id="user-input">
          <h1>BambiSleep AIGF üëÅÔ∏è</h1>
          <div id="llm">
            <form id="llm-form">
              <textarea id="textarea" oninput="autoExpand(this)" placeholder="Prompt my AIGF"></textarea>
              <button id="submit" type="submit" class="send-btn">Send</button>
            </form>
            <div id="user-prompt"></div>
            <div id="audiomessage">
              <audio id="audio" hidden controls></audio>
              <p id="message"></p>
              <p id="error-message" style="display: none; color: red;"></p>
            </div>
          </div>
          <br>
          <div id="system-controls-container">
            <%- include('../views/partials/profile-system-controls.ejs', { profile: profile }) %>
          </div>
        </div>
        <div id="response-container">
          <div id="response-chat-wrapper">
            <div id="response"></div>
            <div id="chat">
              <form id="chat-form">
                <textarea id="textarea-chat" oninput="autoExpand(this)" placeholder="Send in Chat"></textarea>
                <button id="send" type="submit" class="send-btn">Chat</button>
              </form>
              <!-- For existing messages in the initial page load -->
              <ul id="chat-response">
                <% if (chatMessages && chatMessages.length> 0) { %>
                  <% chatMessages.forEach(function(msg) { %>
                    <li <% if (locals.username) { %>class="neon-glow"<% } %>>
                        <span class="chat-time">
                          <%= new Date(msg.timestamp).toLocaleTimeString([], {hour12: false}) %>
                        </span> -
                        <span class="chat-username"><a href="/profile/<%= msg.username %>" class="username-link">
                            <%= msg.username %>
                          </a>:</span>
                        <span class="chat-message">
                          <%= msg.data %>
                        </span>
                    </li>
                    <% }); %>
                      <% } %>
              </ul>
            </div>
          </div>
          <div id="eyeCursorContainer">
            <div id="eyeCursor">
              <div id="eyeCursorText"></div>
              <div id="eyeCursorText2"></div>
              <div id="eye" aria-label="Eye Cursor"></div>
              <div id="eyeCursorText3"></div>
              <div id="eyeCursorText4"></div>
            </div>
          </div>
        </div>
        <div id="collar-container" style="display: none;">
          <div id="textarea-collar-response"></div>
        </div>
      </div>
      <%- include('../views/partials/footer.ejs') %>
        <!-- Make sure these scripts appear in exactly this order -->
        <script src="/socket.io/socket.io.js"></script>
        <script>
          // Initialize socket at the global level
          window.socket = window.socket || io();

          // Log socket connection
          window.socket.on('connect', function() {
            console.log('Socket.io connected with ID:', window.socket.id);
            // Load triggers after connection
            if (typeof initProfileAndTriggers === 'function') {
              setTimeout(initProfileAndTriggers, 100);
            }
          });

          // Handle reconnection
          window.socket.on('reconnect', function() {
            console.log('Socket.io reconnected');
            // Re-initialize as needed
            if (typeof initProfileAndTriggers === 'function') {
              setTimeout(initProfileAndTriggers, 100);
            }
          });

          // Handle disconnect
          window.socket.on('disconnect', function() {
            console.log('Socket.io disconnected');
          });
        </script>
        <script src="js/aigf-core.js"></script>
        <script src="js/psychodelic-trigger-mania.js"></script>
        <script src="js/text2speech.js"></script>
        <script src="js/responsive.js"></script>
        <script>
          document.addEventListener("DOMContentLoaded", () => {
            // Use window.socket instead of socket
            // Ensure socket is initialized before using it
            const initProfileAndTriggers = () => {
              const modal = document.getElementById('username-modal');
              let username = '';

              // Get username from cookie
              const cookieUsername = getCookie('bambiname');
              username = cookieUsername || '';
              
              if (!username) {
                modal.style.display = 'block';
              } else {
                window.username = username;
              }

              // Set username data attribute for profile-system-controls.ejs
              document.body.setAttribute('data-username', username);

              // Only load profile triggers if socket exists and is connected
              if (window.username && window.socket && window.socket.connected) {
                loadProfileTriggers(window.username);
              }
            };

            // Helper function to get cookie by name
            function getCookie(name) {
              const value = `; ${document.cookie}`;
              const parts = value.split(`; ${name}=`);
              if (parts.length === 2) return parts.pop().split(';').shift();
              return '';
            }

            // Only initialize triggers after socket is ready
            // Use a short delay to ensure socket.io has initialized
            setTimeout(() => {
              if (window.socket) {
                initProfileAndTriggers();
              } else {
                console.error("Socket not available - check script loading order");
              }
            }, 100);

            // Helper function to load profile triggers
            function loadProfileTriggers(username) {
              if (!window.socket || !window.socket.connected) {
                console.log("Socket not connected, can't load profile triggers");
                return;
              }
              
              // Request active triggers from server for this profile
              window.socket.emit('get-profile-triggers', { username });
              
              // Listen for trigger data from server
              window.socket.on('profile-triggers', function(data) {
                if (data && data.triggerNames && Array.isArray(data.triggerNames)) {
                  console.log("Received profile triggers:", data.triggerNames);
                  
                  // Use localStorage to apply these triggers
                  localStorage.setItem('bambiActiveTriggers', JSON.stringify(data.triggerNames));
                  
                  // If trigger.js is loaded and has this function, update the UI
                  if (window.bambiAudio && typeof window.bambiAudio.refreshTriggers === 'function') {
                    window.bambiAudio.refreshTriggers();
                  }

                  window.socket.emit('triggers', { triggerNames: data.triggerNames });
                }
              });
            }

            document.getElementById("chat-form").addEventListener("submit", (event) => {
              event.preventDefault();
              const messageInput = document.getElementById("textarea-chat");
              const message = messageInput.value.trim();

              if (message && window.username) {
                if (window.socket && window.socket.connected) {
                  window.socket.emit("chat message", {
                    data: message,
                    username: window.username
                  });

                  messageInput.value = "";
                  messageInput.style.height = 'inherit';
                } else {
                  console.error("Socket not connected, can't send message");
                }
              }
            });
            
            // Make functions available globally
            window.initProfileAndTriggers = initProfileAndTriggers;
            window.loadProfileTriggers = loadProfileTriggers;
          });
        </script>
        <script>
          document.addEventListener("DOMContentLoaded", () => {
            // Create a simple settings object if needed
            window.bambiSystemSettings = window.bambiSystemSettings || {};
            
            // Handle settings updates in a safer way
            function updateSettings() {
              // Only proceed if needed elements exist
              const settingsData = window.bambiSystemSettings;
              
              if (window.socket && settingsData) {
                window.socket.emit('worker:settings:update', settingsData);
              }
            }
            
            // Make function available globally
            window.updateBambiSettings = updateSettings;
          });
        </script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js"></script>
        <script src="js/bootstrap.min.js"></script>
  </body>

</html>