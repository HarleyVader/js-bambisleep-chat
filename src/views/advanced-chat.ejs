<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head', { title: locals.title || 'BambiSleep Advanced Chat' }) %>

<body data-username="<%= locals.username || '' %>">
  <%- include('./partials/nav') %>

  <div class="container">
    <div class="chat-page-container advanced-chat">
      <!-- Left sidebar with profile and controls -->
      <div class="chat-sidebar">
        <h1 class="chat-title">Advanced Chat</h1>
        
        <% if (!locals.username || locals.username === 'anonBambi') { %>
          <div class="profile-prompt-card">
            <p>You are chatting as an anonymous Bambi.</p>
            <p>To save your chat history and settings, create or log in to a profile.</p>
            <div class="profile-actions">
              <a href="/profile/new" class="btn-primary">Create Profile</a>
              <button id="set-username-btn" class="btn-secondary">Set Username</button>
            </div>
          </div>
        <% } else if (locals.profile) { %>
          <div class="profile-card">
            <div class="profile-header">
              <div class="profile-avatar">
                <img src="<%= profile.avatar || '/gif/default-avatar.gif' %>" alt="<%= profile.displayName || profile.username %>">
              </div>
              <div class="profile-info">
                <h3 class="neon-text"><%= profile.displayName || profile.username %></h3>
                <div class="level-display">Level <%= profile.level || 1 %></div>
                <div class="xp-bar-container">
                  <div class="xp-bar" style="width: <%= Math.min(100, (profile.xp / (Math.pow(profile.level, 2) * 100)) * 100) %>%"></div>
                </div>
                <div class="xp-display"><%= Math.floor(profile.xp || 0) %> XP</div>
              </div>
            </div>
            <div class="profile-actions">
              <a href="/profile/<%= profile.username %>" class="btn-primary">View Profile</a>
              <a href="/trigger-script" class="btn-secondary">Trigger Script</a>
            </div>
          </div>
        <% } %>

        <!-- System controls section -->
        <div id="system-controls-container">
          <%- include('./partials/profile-system-controls', { profile: profile }) %>
        </div>
        
        <!-- Session history for logged-in users -->
        <% if (locals.username && username !== 'anonBambi') { %>
          <div class="session-history-panel">
            <h3>Recent Sessions</h3>
            <div id="session-list">
              <% if (locals.sessionHistory && sessionHistory.length > 0) { %>
                <% sessionHistory.forEach(function(session) { %>
                  <div class="session-item" data-session-id="<%= session._id %>">
                    <div class="session-title"><%= session.title || 'Untitled Session' %></div>
                    <div class="session-time"><%= new Date(session.metadata?.lastActivity || session.updatedAt).toLocaleString() %></div>
                    <button class="load-session-btn" data-session-id="<%= session._id %>">Load</button>
                  </div>
                <% }); %>
              <% } else { %>
                <p class="no-sessions-message">No sessions found</p>
              <% } %>
            </div>
            <button id="new-session-btn" class="btn-primary">New Session</button>
          </div>
        <% } %>
      </div>

      <!-- Main chat area -->
      <div class="chat-main">
        <!-- Chat messages display -->
        <div class="chat-messages-container">
          <div class="chat-messages" id="chat-messages">
            <% if (chatMessages && chatMessages.length > 0) { %>
              <% chatMessages.forEach(function(msg) { %>
                <div class="chat-message-item <%= msg.username === username ? 'user-message' : '' %>">
                  <div class="message-header">
                    <span class="message-time"><%= new Date(msg.timestamp).toLocaleTimeString([], {hour12: false}) %></span>
                    <span class="message-username"><a href="/profile/<%= msg.username %>" class="username-link"><%= msg.username %></a></span>
                  </div>
                  <div class="message-content"><%= msg.data %></div>
                </div>
              <% }); %>
            <% } %>
          </div>

          <!-- Eye cursor animation -->
          <div id="eyeCursorContainer">
            <div id="eyeCursor">
              <div id="eyeCursorText"></div>
              <div id="eyeCursorText2"></div>
              <div id="eye" aria-label="Eye Cursor"></div>
              <div id="eyeCursorText3"></div>
              <div id="eyeCursorText4"></div>
            </div>
          </div>

          <!-- Audio message display -->
          <div id="audiomessage">
            <audio id="audio" hidden controls></audio>
            <p id="message"></p>
            <p id="error-message" style="display: none; color: red;"></p>
          </div>
        </div>

        <!-- Chat input form with expanded features -->
        <div class="chat-input-container advanced">
          <div class="input-tools">
            <button id="toggle-tts-btn" class="tool-btn" title="Toggle Text-to-Speech">
              <i class="fas fa-volume-up"></i>
            </button>
            <button id="toggle-triggers-btn" class="tool-btn" title="Toggle Trigger Panel">
              <i class="fas fa-magic"></i>
            </button>
            <button id="toggle-history-btn" class="tool-btn" title="Toggle Session History">
              <i class="fas fa-history"></i>
            </button>
            <button id="save-session-btn" class="tool-btn" title="Save Session">
              <i class="fas fa-save"></i>
            </button>
          </div>
          <form id="chat-form">
            <textarea id="textarea-chat" oninput="autoExpand(this)" placeholder="Type your message here..."></textarea>
            <button id="send" type="submit" class="send-btn">Send</button>
          </form>
        </div>
      </div>

      <!-- Right sidebar with active users and triggers -->
      <div class="chat-sidebar chat-info-sidebar">
        <!-- Active triggers panel -->
        <div class="active-triggers-panel">
          <h3>Active Triggers</h3>
          <div class="triggers-list" id="active-triggers">
            <% if (locals.profile && profile.systemControls && profile.systemControls.activeTriggers) { %>
              <% profile.systemControls.activeTriggers.forEach(function(triggerName) { %>
                <div class="trigger-tag"><%= triggerName %></div>
              <% }); %>
            <% } else { %>
              <p class="no-triggers-message">No active triggers</p>
            <% } %>
          </div>
        </div>

        <!-- Trigger selector panel -->
        <div class="trigger-selector-panel">
          <h3>Available Triggers</h3>
          <div class="trigger-categories">
            <% if (triggers && triggers.length > 0) { %>
              <% 
              // Group triggers by category
              const categories = {};
              triggers.forEach(trigger => {
                const category = trigger.category || 'other';
                if (!categories[category]) {
                  categories[category] = [];
                }
                categories[category].push(trigger);
              });
              
              // Display each category
              Object.keys(categories).forEach(category => {
              %>
                <div class="trigger-category">
                  <h4 class="category-name"><%= category %></h4>
                  <div class="category-triggers">
                    <% categories[category].forEach(trigger => { %>
                      <div class="trigger-item" 
                           data-name="<%= trigger.name %>"
                           data-description="<%= trigger.description %>"
                           data-category="<%= trigger.category %>">
                        <span class="trigger-name"><%= trigger.name %></span>
                        <span class="trigger-add" title="Add to active triggers">+</span>
                      </div>
                    <% }); %>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <p class="no-triggers-message">No triggers available</p>
            <% } %>
          </div>
        </div>

        <!-- Collar display panel -->
        <div class="collar-display-panel" id="collar-container" style="display: none;">
          <h3>Your Collar</h3>
          <div id="textarea-collar-response"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Username modal -->
  <div id="username-modal" class="modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h3>Enter Your Bambi Name</h3>
      <input type="text" id="username-input" placeholder="Enter username">
      <div class="modal-actions">
        <button id="username-submit" class="btn-primary">Submit</button>
        <button id="username-cancel" class="btn-secondary">Cancel</button>
      </div>
    </div>
  </div>
  
  <!-- Save session modal -->
  <div id="save-session-modal" class="modal">
    <div class="modal-content">
      <span class="close-modal" id="close-save-session">&times;</span>
      <h3>Save Session</h3>
      <div class="input-container">
        <label for="session-title">Session Title</label>
        <input type="text" id="session-title" placeholder="Enter session title">
      </div>
      <div class="modal-actions">
        <button id="save-session-submit" class="btn-primary">Save</button>
        <button id="save-session-cancel" class="btn-secondary">Cancel</button>
      </div>
    </div>
  </div>

  <%- include('./partials/footer') %>

  <!-- Scripts -->
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/aigf-core.js"></script>
  <script src="/js/psychodelic-trigger-mania.js"></script>
  <script src="/js/text2speech.js"></script>
  <script src="/js/responsive.js"></script>
  <script src="/js/triggers.js"></script>
  <script src="/js/streaming-handler.js"></script>
  
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const modal = document.getElementById('username-modal');
      const closeModalBtn = document.querySelector('.close-modal');
      const setUsernameBtn = document.getElementById('set-username-btn');
      let username = '';
      let currentSessionId = null;

      // Cookie helper functions
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
      }

      username = getCookie('bambiname');
      if (!username) {
        // Don't automatically show modal, let user click the button
        username = 'anonBambi';
      } else {
        // If we have a username and it's not anonBambi, load the profile triggers
        if (username !== 'anonBambi') {
          loadProfileTriggers(username);
        }
      }

      // Show modal when set username button is clicked
      if (setUsernameBtn) {
        setUsernameBtn.addEventListener('click', () => {
          modal.style.display = 'block';
        });
      }

      // Close modal when close button is clicked
      if (closeModalBtn) {
        closeModalBtn.addEventListener('click', () => {
          modal.style.display = 'none';
        });
      }

      // Submit username form
      document.getElementById('username-submit').addEventListener('click', () => {
        const input = document.getElementById('username-input');
        const newUsername = input.value.trim();
        if (newUsername) {
          username = newUsername;
          document.cookie = `bambiname=${encodeURIComponent(username)}; path=/`;
          
          if (typeof socket !== 'undefined') {
            socket.emit('set username', username);
          }
          
          modal.style.display = 'none';
          window.username = username;

          // Reload the page to update the profile data
          window.location.reload();
        }
      });

      // Cancel button in modal
      document.getElementById('username-cancel').addEventListener('click', () => {
        modal.style.display = 'none';
      });

      // Set username data attribute for profile-system-controls.ejs
      document.body.setAttribute('data-username', username);

      // Helper function to load profile triggers
      function loadProfileTriggers(username) {
        if (typeof socket !== 'undefined' && socket.connected) {
          socket.emit('get-profile-data', { username }, function(response) {
            if (response && response.success && response.profile) {
              const profile = response.profile;
              if (profile.systemControls && profile.systemControls.activeTriggers) {
                const activeTriggers = profile.systemControls.activeTriggers;
                
                // Send triggers to worker
                socket.emit('triggers', {
                  triggerNames: activeTriggers.join(','),
                  triggerDetails: activeTriggers.map(t => ({ name: t }))
                });
                
                console.log('Loaded triggers from profile:', activeTriggers);
              }
            }
          });
        }
      }

      // Chat form submission
      document.getElementById("chat-form").addEventListener("submit", (event) => {
        event.preventDefault();
        const messageInput = document.getElementById("textarea-chat");
        const message = messageInput.value.trim();
        
        if (message && window.username) {
          if (typeof socket !== 'undefined' && socket.connected) {
            socket.emit("chat message", { 
              data: message, 
              username: window.username,
              sessionId: currentSessionId
            });
            
            messageInput.value = "";
            messageInput.style.height = 'inherit';
          } else {
            console.error("Socket connection not available");
            alert("Not connected to chat server. Please refresh the page.");
          }
        }
      });

      // Handle incoming chat messages
      if (typeof socket !== 'undefined') {
        socket.on("chat message", (msg) => {
          const messagesContainer = document.getElementById("chat-messages");
          const messageElement = document.createElement("div");
          messageElement.className = `chat-message-item ${msg.username === username ? 'user-message' : ''}`;
          
          const messageHeader = document.createElement("div");
          messageHeader.className = "message-header";
          
          const timeSpan = document.createElement("span");
          timeSpan.className = "message-time";
          timeSpan.textContent = new Date().toLocaleTimeString([], {hour12: false});
          
          const usernameSpan = document.createElement("span");
          usernameSpan.className = "message-username";
          
          const usernameLink = document.createElement("a");
          usernameLink.href = `/profile/${msg.username}`;
          usernameLink.className = "username-link";
          usernameLink.textContent = msg.username;
          
          usernameSpan.appendChild(usernameLink);
          messageHeader.appendChild(timeSpan);
          messageHeader.appendChild(usernameSpan);
          
          const messageContent = document.createElement("div");
          messageContent.className = "message-content";
          messageContent.textContent = msg.data;
          
          messageElement.appendChild(messageHeader);
          messageElement.appendChild(messageContent);
          
          messagesContainer.appendChild(messageElement);
          
          // Scroll to the bottom
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        // Collar messages
        socket.on('collar', (message) => {
          let collarContainer = document.getElementById('collar-container');
          let collarResponse = document.getElementById('textarea-collar-response');
          
          if (!collarResponse) {
            collarResponse = document.createElement('div');
            collarResponse.id = 'textarea-collar-response';
            
            if (!collarContainer) {
              collarContainer = document.createElement('div');
              collarContainer.id = 'collar-container';
              document.body.appendChild(collarContainer);
            }
            
            collarContainer.appendChild(collarResponse);
          }
          
          // Display the collar container
          collarContainer.style.display = 'block';
          
          const messageElement = document.createElement('p');
          messageElement.textContent = message;
          
          if (collarResponse.firstChild) {
            collarResponse.insertBefore(messageElement, collarResponse.firstChild);
          } else {
            collarResponse.appendChild(messageElement);
          }
        });

        // Profile updates
        socket.on('profile-update', function(data) {
          updateXPDisplay(data);
        });

        socket.on('xp:update', function(data) {
          updateXPDisplay(data);
        });
        
        // Session events
        socket.on('session-created', function(data) {
          if (data && data.sessionId) {
            currentSessionId = data.sessionId;
            console.log('Session created with ID:', currentSessionId);
          }
        });
        
        socket.on('session-loaded', function(data) {
          if (data && data.session && data.sessionId) {
            currentSessionId = data.sessionId;
            console.log('Session loaded with ID:', currentSessionId);
            
            // Clear chat
            const messagesContainer = document.getElementById("chat-messages");
            messagesContainer.innerHTML = '';
            
            // Add session messages
            if (data.session.messages && data.session.messages.length > 0) {
              data.session.messages.forEach(msg => {
                const messageElement = document.createElement("div");
                messageElement.className = `chat-message-item ${msg.role === 'user' ? 'user-message' : ''}`;
                
                const messageHeader = document.createElement("div");
                messageHeader.className = "message-header";
                
                const timeSpan = document.createElement("span");
                timeSpan.className = "message-time";
                timeSpan.textContent = new Date(msg.timestamp).toLocaleTimeString([], {hour12: false});
                
                const usernameSpan = document.createElement("span");
                usernameSpan.className = "message-username";
                
                const usernameLink = document.createElement("a");
                usernameLink.href = `/profile/${msg.role === 'user' ? username : 'BambiAI'}`;
                usernameLink.className = "username-link";
                usernameLink.textContent = msg.role === 'user' ? username : 'BambiAI';
                
                usernameSpan.appendChild(usernameLink);
                messageHeader.appendChild(timeSpan);
                messageHeader.appendChild(usernameSpan);
                
                const messageContent = document.createElement("div");
                messageContent.className = "message-content";
                messageContent.textContent = msg.content;
                
                messageElement.appendChild(messageHeader);
                messageElement.appendChild(messageContent);
                
                messagesContainer.appendChild(messageElement);
              });
              
              // Scroll to the bottom
              messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
          }
        });
      }

      // Helper function to update XP display
      function updateXPDisplay(data) {
        if (!data) return;
        
        // Implementation depends on your UI structure
        console.log('Profile XP update:', data);
        
        // Update level display if element exists
        const levelDisplay = document.querySelector('.level-display');
        if (levelDisplay && data.level) {
          levelDisplay.textContent = `Level ${data.level}`;
        }
        
        // Update XP bar if element exists
        const xpBar = document.querySelector('.xp-bar');
        if (xpBar && data.level && data.xp) {
          const nextLevelXp = Math.pow(data.level, 2) * 100;
          const percentage = Math.min(100, (data.xp / nextLevelXp) * 100);
          xpBar.style.width = `${percentage}%`;
        }
        
        // Update XP text if element exists
        const xpDisplay = document.querySelector('.xp-display');
        if (xpDisplay && data.xp) {
          xpDisplay.textContent = `${Math.floor(data.xp)} XP`;
        }
      }

      // Session management
      const newSessionBtn = document.getElementById('new-session-btn');
      if (newSessionBtn) {
        newSessionBtn.addEventListener('click', () => {
          // Clear current session
          currentSessionId = null;
          
          // Clear chat
          const messagesContainer = document.getElementById("chat-messages");
          messagesContainer.innerHTML = '';
          
          // Create new session on server
          if (typeof socket !== 'undefined' && socket.connected) {
            socket.emit('create-session');
          }
        });
      }
      
      // Load session buttons
      const loadSessionBtns = document.querySelectorAll('.load-session-btn');
      loadSessionBtns.forEach(btn => {
        btn.addEventListener('click', () => {
          const sessionId = btn.getAttribute('data-session-id');
          if (sessionId && typeof socket !== 'undefined' && socket.connected) {
            socket.emit('load-session', sessionId);
          }
        });
      });
      
      // Save session button and modal
      const saveSessionBtn = document.getElementById('save-session-btn');
      const saveSessionModal = document.getElementById('save-session-modal');
      const closeSaveSessionBtn = document.getElementById('close-save-session');
      const saveSessionSubmitBtn = document.getElementById('save-session-submit');
      const saveSessionCancelBtn = document.getElementById('save-session-cancel');
      
      if (saveSessionBtn) {
        saveSessionBtn.addEventListener('click', () => {
          // Only show save modal if user is logged in
          if (username && username !== 'anonBambi') {
            saveSessionModal.style.display = 'block';
          } else {
            alert('You need to be logged in to save sessions. Please create a profile or set a username.');
          }
        });
      }
      
      if (closeSaveSessionBtn) {
        closeSaveSessionBtn.addEventListener('click', () => {
          saveSessionModal.style.display = 'none';
        });
      }
      
      if (saveSessionCancelBtn) {
        saveSessionCancelBtn.addEventListener('click', () => {
          saveSessionModal.style.display = 'none';
        });
      }
      
      if (saveSessionSubmitBtn) {
        saveSessionSubmitBtn.addEventListener('click', () => {
          const sessionTitle = document.getElementById('session-title').value.trim() || 'Untitled Session';
          
          if (typeof socket !== 'undefined' && socket.connected) {
            socket.emit('save-session', {
              sessionId: currentSessionId,
              title: sessionTitle
            });
            
            saveSessionModal.style.display = 'none';
            alert('Session saved successfully!');
          }
        });
      }

      // Auto-expand textarea
      window.autoExpand = function(element) {
        element.style.height = 'inherit';
        const computed = window.getComputedStyle(element);
        const height = parseInt(computed.getPropertyValue('border-top-width'), 10)
                     + parseInt(computed.getPropertyValue('padding-top'), 10)
                     + element.scrollHeight
                     + parseInt(computed.getPropertyValue('padding-bottom'), 10)
                     + parseInt(computed.getPropertyValue('border-bottom-width'), 10);

        element.style.height = height + 'px';
      };
      
      // Handle trigger selection
      const triggerItems = document.querySelectorAll('.trigger-item');
      triggerItems.forEach(item => {
        const addBtn = item.querySelector('.trigger-add');
        if (addBtn) {
          addBtn.addEventListener('click', () => {
            const triggerName = item.getAttribute('data-name');
            
            // Find active triggers container
            const activeTriggersContainer = document.getElementById('active-triggers');
            
            // Check if this trigger is already active
            const existingTrigger = Array.from(activeTriggersContainer.querySelectorAll('.trigger-tag'))
              .find(tag => tag.textContent === triggerName);
              
            if (!existingTrigger) {
              // Add to active triggers UI
              const triggerTag = document.createElement('div');
              triggerTag.className = 'trigger-tag';
              triggerTag.textContent = triggerName;
              activeTriggersContainer.appendChild(triggerTag);
              
              // Remove "no triggers" message if it exists
              const noTriggersMsg = activeTriggersContainer.querySelector('.no-triggers-message');
              if (noTriggersMsg) {
                noTriggersMsg.remove();
              }
              
              // Update on server (if logged in)
              if (username && username !== 'anonBambi' && typeof socket !== 'undefined' && socket.connected) {
                // Get all active triggers
                const activeTriggers = Array.from(activeTriggersContainer.querySelectorAll('.trigger-tag'))
                  .map(tag => tag.textContent);
                  
                // Send update to server
                socket.emit('update-system-controls', {
                  username: username,
                  activeTriggers: activeTriggers
                });
                
                // Send trigger to worker
                socket.emit('triggers', {
                  triggerNames: activeTriggers.join(','),
                  triggerDetails: activeTriggers.map(t => ({ name: t }))
                });
              }
            }
          });
        }
      });
      
      // Tool buttons functionality
      const toggleTTSBtn = document.getElementById('toggle-tts-btn');
      const toggleTriggersBtn = document.getElementById('toggle-triggers-btn');
      const toggleHistoryBtn = document.getElementById('toggle-history-btn');
      
      if (toggleTTSBtn) {
        toggleTTSBtn.addEventListener('click', () => {
          // Toggle TTS functionality 
          const isTTSEnabled = toggleTTSBtn.classList.toggle('active');
          console.log('TTS toggled:', isTTSEnabled);
          
          // Here you would implement actual TTS toggle
        });
      }
      
      if (toggleTriggersBtn) {
        toggleTriggersBtn.addEventListener('click', () => {
          const triggerSelector = document.querySelector('.trigger-selector-panel');
          if (triggerSelector) {
            const isVisible = triggerSelector.style.display !== 'none';
            triggerSelector.style.display = isVisible ? 'none' : 'block';
            toggleTriggersBtn.classList.toggle('active', !isVisible);
          }
        });
      }
      
      if (toggleHistoryBtn) {
        toggleHistoryBtn.addEventListener('click', () => {
          const sessionHistoryPanel = document.querySelector('.session-history-panel');
          if (sessionHistoryPanel) {
            const isVisible = sessionHistoryPanel.style.display !== 'none';
            sessionHistoryPanel.style.display = isVisible ? 'none' : 'block';
            toggleHistoryBtn.classList.toggle('active', !isVisible);
          }
        });
      }  </script>
  
  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/advanced-chat.js"></script>
</body>
</html>
