<!DOCTYPE html>
<html lang="en">
<%- include('../views/partials/head') %>
  <title><%= bambi.displayName || bambi.username %> | Bambisleep.chat</title>
  <style>
    .profile-container {
      display: flex;
      flex-direction: column;
      max-width: 900px;
      margin: 2rem auto;
      background-color: var(--card-bg);
      border-radius: 12px;
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.15);
      overflow: hidden;
    }
    
    .profile-header {
      position: relative;
      height: 200px;
      background: linear-gradient(135deg, #fa81ff 0%, #ff4fa2 100%);
      color: white;
    }
    
    .profile-avatar {
      position: absolute;
      bottom: -50px;
      left: 50px;
      width: 150px;
      height: 150px;
      border-radius: 50%;
      border: 5px solid var(--card-bg);
      object-fit: cover;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    
    .profile-details {
      margin-top: 60px;
      padding: 2rem;
    }
    
    .profile-name {
      margin-bottom: 0.5rem;
      font-size: 2rem;
    }
    
    .profile-username {
      color: var(--text-muted);
      margin-bottom: 1.5rem;
      font-size: 1.1rem;
    }
    
    .profile-description {
      margin-bottom: 2rem;
      line-height: 1.6;
    }
    
    .profile-stats {
      display: flex;
      gap: 2rem;
      margin-bottom: 2rem;
    }
    
    .stat {
      text-align: center;
    }
    
    .stat-value {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 0.25rem;
    }
    
    .stat-label {
      font-size: 0.9rem;
      color: var(--text-muted);
    }
    
    .profile-triggers {
      margin-bottom: 2rem;
    }
    
    .triggers-title {
      font-size: 1.2rem;
      margin-bottom: 1rem;
      font-weight: 500;
    }
    
    .trigger-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    
    .trigger-tag {
      padding: 0.5rem 1rem;
      background-color: var(--accent-light);
      color: var(--accent);
      border-radius: 100px;
      font-size: 0.85rem;
    }
    
    .edit-profile-btn {
      padding: 0.75rem 1.5rem;
      background-color: var(--accent);
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 500;
      transition: background-color 0.2s ease;
      margin-top: 1rem;
      display: inline-block;
    }
    
    .edit-profile-btn:hover {
      background-color: var(--accent-hover);
    }
    
    .edit-form {
      padding: 2rem;
      border-top: 1px solid var(--border);
      display: none;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
    }
    
    label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    input, textarea {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--border);
      border-radius: 4px;
      background-color: var(--input-bg);
      color: var(--text-primary);
    }
    
    input[type="file"] {
      padding: 0.5rem 0;
      background: none;
      border: none;
    }
    
    .triggers-input {
      margin-top: 0.5rem;
    }
    
    .trigger-pill {
      display: inline-block;
      padding: 0.35rem 0.75rem;
      background-color: var(--accent-light);
      color: var(--accent);
      border-radius: 100px;
      font-size: 0.85rem;
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
    }
    
    .trigger-pill span {
      margin-left: 0.25rem;
      cursor: pointer;
    }
    
    .profile-activity {
      margin-bottom: 2rem;
    }
    
    .activity-feed {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
    
    .activity-item {
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    
    .activity-icon {
      font-size: 1.5rem;
      color: var(--accent);
    }
    
    .activity-details {
      flex-grow: 1;
    }
    
    .activity-details p {
      margin: 0;
    }
    
    .activity-details small {
      color: var(--text-muted);
    }

    .heart-container {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .heart-button {
      background: none;
      border: none;
      cursor: pointer;
      padding: 0;
      font-size: 1.5rem;
      color: #ccc;
      transition: transform 0.2s, color 0.2s;
    }

    .heart-button:hover {
      transform: scale(1.1);
    }

    .heart-button.active {
      color: #ff4fa2;
    }

    .heart-button.active i {
      animation: heartbeat 1s ease-in-out;
    }

    @keyframes heartbeat {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.2); }
    }
  </style>
</head>
<body>
   <%- include('../views/partials/nav.ejs') %>
  
  <main class="container">
    <div class="profile-container">
      <div class="profile-header">
        <img src="<%= bambi.profilePicture %>" alt="<%= bambi.displayName || bambi.username %>" class="profile-avatar">
      </div>
      
      <div class="profile-details">
        <h1 class="profile-name"><%= bambi.displayName || bambi.username %></h1>
        <div class="profile-username">@<%= bambi.username %></div>
        
        <div class="profile-description">
          <%= bambi.description || 'No description provided' %>
        </div>
        
        <div class="profile-stats">
          <div class="stat">
            <div class="stat-value"><%= bambi.level %></div>
            <div class="stat-label">Level</div>
          </div>
          
          <div class="stat">
            <div class="stat-value"><%= bambi.triggers.length %></div>
            <div class="stat-label">Triggers</div>
          </div>
          
          <div class="stat">
            <div class="stat-value"><%= bambi.favoriteFiles.length %></div>
            <div class="stat-label">Favorite Files</div>
          </div>
          
          <div class="stat">
            <div class="stat-value heart-container">
              <span id="heartCount"><%= bambi.hearts ? bambi.hearts.count : 0 %></span>
              <button id="heartButton" class="heart-button">
                <i class="fas fa-heart"></i>
              </button>
            </div>
            <div class="stat-label">Hearts</div>
          </div>
        </div>
        
        <div class="profile-triggers">
          <h3 class="triggers-title">Triggers</h3>
          
          <div class="trigger-tags">
            <% if (bambi.triggers && bambi.triggers.length > 0) { %>
              <% bambi.triggers.forEach(trigger => { %>
                <div class="trigger-tag"><%= trigger %></div>
              <% }) %>
            <% } else { %>
              <p>No triggers added yet</p>
            <% } %>
          </div>
        </div>
        
        <div class="profile-activity">
          <h3>Recent Activity</h3>
          <div class="activity-feed">
            <% if (bambi.activities && bambi.activities.length > 0) { %>
              <% bambi.activities.slice(0, 5).forEach(activity => { %>
                <div class="activity-item">
                  <div class="activity-icon">
                    <% if (activity.type === 'file') { %>
                      <i class="fas fa-file-audio"></i>
                    <% } else if (activity.type === 'level') { %>
                      <i class="fas fa-arrow-up"></i>
                    <% } else if (activity.type === 'badge') { %>
                      <i class="fas fa-award"></i>
                    <% } %>
                  </div>
                  <div class="activity-details">
                    <p><%= activity.description %></p>
                    <small><%= new Date(activity.timestamp).toLocaleString() %></small>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <p>No recent activity</p>
            <% } %>
          </div>
        </div>
        
        <button id="editProfileBtn" class="edit-profile-btn">Edit Profile</button>
      </div>
      
      <div id="editForm" class="edit-form">
        <h2>Edit Your Profile</h2>
        <form id="profileEditForm">
          <div class="form-group">
            <label for="displayNameEdit">Display Name</label>
            <input type="text" id="displayNameEdit" name="displayName" value="<%= bambi.displayName || '' %>" placeholder="Your display name">
          </div>
          
          <div class="form-group">
            <label for="descriptionEdit">About You</label>
            <textarea id="descriptionEdit" name="description" rows="4" placeholder="Tell us about yourself..."><%= bambi.description || '' %></textarea>
          </div>
          
          <div class="form-group">
            <label for="profilePictureEdit">Profile Picture</label>
            <input type="file" id="profilePictureEdit" name="profilePicture" accept="image/*">
          </div>
          
          <div class="form-group">
            <label>Triggers</label>
            <div id="triggersList" class="triggers-input">
              <% if (bambi.triggers && bambi.triggers.length > 0) { %>
                <% bambi.triggers.forEach(trigger => { %>
                  <div class="trigger-pill" data-value="<%= trigger %>">
                    <%= trigger %><span class="remove-trigger">Ã—</span>
                  </div>
                <% }) %>
              <% } %>
            </div>
            <input type="text" id="newTrigger" placeholder="Type a trigger and press Enter">
          </div>
          
          <div class="form-group">
            <label>Profile Theme</label>
            <div class="theme-customizer">
              <div class="color-picker">
                <label for="primaryColor">Primary Color:</label>
                <input type="color" id="primaryColor" name="primaryColor" value="<%= bambi.profileTheme?.primaryColor || '#fa81ff' %>">
              </div>
              
              <div class="color-picker">
                <label for="secondaryColor">Secondary Color:</label>
                <input type="color" id="secondaryColor" name="secondaryColor" value="<%= bambi.profileTheme?.secondaryColor || '#ff4fa2' %>">
              </div>
              
              <div class="color-picker">
                <label for="textColor">Text Color:</label>
                <input type="color" id="textColor" name="textColor" value="<%= bambi.profileTheme?.textColor || '#ffffff' %>">
              </div>
              
              <div class="preview-box" id="themePreview">
                <span>Theme Preview</span>
              </div>
            </div>
          </div>
          
          <button type="submit" class="edit-profile-btn">Save Changes</button>
        </form>
      </div>
    </div>
  </main>
  
  <%- include('../views/partials/footer.ejs') %>
  
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const editProfileBtn = document.getElementById('editProfileBtn');
    const editForm = document.getElementById('editForm');
    const profileEditForm = document.getElementById('profileEditForm');
    const displayNameEdit = document.getElementById('displayNameEdit');
    const descriptionEdit = document.getElementById('descriptionEdit');
    const profilePictureEdit = document.getElementById('profilePictureEdit');
    const newTriggerInput = document.getElementById('newTrigger');
    const triggersList = document.getElementById('triggersList');
    const charCounter = document.createElement('div');
    
    // Validation flags
    let isDescriptionValid = true;
    let isFileValid = true;
    
    // Add character counter to edit form
    charCounter.className = 'char-counter';
    charCounter.style.textAlign = 'right';
    charCounter.style.fontSize = '0.8rem';
    charCounter.style.color = 'var(--text-muted)';
    descriptionEdit.parentNode.appendChild(charCounter);
    
    // Toggle edit form visibility
    editProfileBtn.addEventListener('click', function() {
      if (editForm.style.display === 'block') {
        editForm.style.display = 'none';
      } else {
        editForm.style.display = 'block';
      }
    });
    
    // Handle adding new triggers
    newTriggerInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        const triggerValue = this.value.trim();
        
        if (triggerValue) {
          // Validate trigger - max length and max count
          if (triggerValue.length > 30) {
            alert('Trigger text cannot exceed 30 characters');
            return;
          }
          
          if (triggersList.querySelectorAll('.trigger-pill').length >= 20) {
            alert('You cannot add more than 20 triggers');
            return;
          }
          
          // Create new trigger pill
          const triggerPill = document.createElement('div');
          triggerPill.className = 'trigger-pill';
          triggerPill.dataset.value = triggerValue;
          triggerPill.innerHTML = `${triggerValue}<span class="remove-trigger">Ã—</span>`;
          
          triggersList.appendChild(triggerPill);
          this.value = '';
          
          // Add event listener to the new remove button
          triggerPill.querySelector('.remove-trigger').addEventListener('click', function() {
            triggerPill.remove();
          });
        }
      }
    });
    
    // Add event listeners to existing remove buttons
    document.querySelectorAll('.remove-trigger').forEach(button => {
      button.addEventListener('click', function() {
        this.parentElement.remove();
      });
    });
    
    // Validate display name
    displayNameEdit.addEventListener('input', function() {
      const displayName = this.value.trim();
      if (displayName.length > 50) {
        this.value = displayName.substring(0, 50);
      }
    });
    
    // Validate file uploads
    profilePictureEdit.addEventListener('change', function() {
      const file = this.files[0];
      
      // Reset validation
      isFileValid = true;
      
      if (file) {
        // Check file type
        const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
        if (!validTypes.includes(file.type)) {
          alert('Please select a valid image file (JPEG, PNG, GIF, or WEBP)');
          this.value = '';
          isFileValid = false;
          return;
        }
        
        // Check file size (max 2MB)
        const maxSize = 2 * 1024 * 1024; // 2MB
        if (file.size > maxSize) {
          alert('File size must be less than 2MB');
          this.value = '';
          isFileValid = false;
          return;
        }
      }
      
      updateSubmitButton();
    });
    
    // Update character count function
    function updateCharCount() {
      const remaining = 500 - descriptionEdit.value.length;
      charCounter.textContent = `${remaining} characters remaining`;
      
      if (remaining < 0) {
        charCounter.style.color = 'var(--error)';
        isDescriptionValid = false;
      } else {
        charCounter.style.color = 'var(--text-muted)';
        isDescriptionValid = true;
      }
      
      updateSubmitButton();
    }
    
    // Enable/disable submit button based on form validity
    function updateSubmitButton() {
      const submitButton = profileEditForm.querySelector('button[type="submit"]');
      
      if (isDescriptionValid && isFileValid) {
        submitButton.disabled = false;
        submitButton.style.opacity = '1';
      } else {
        submitButton.disabled = true;
        submitButton.style.opacity = '0.5';
      }
    }
    
    // Add event listeners
    descriptionEdit.addEventListener('input', updateCharCount);
    updateCharCount(); // Initial count
    
    // Update submit button state initially
    updateSubmitButton();
    
    // Handle form submission
    profileEditForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Final validation checks
      if (!isDescriptionValid) {
        alert('Description cannot exceed 500 characters');
        return;
      }
      
      if (!isFileValid) {
        alert('Please select a valid image file');
        return;
      }
      
      // Collect all triggers
      const triggers = Array.from(triggersList.querySelectorAll('.trigger-pill')).map(pill => pill.dataset.value);
      
      // First update profile data
      const profileData = {
        displayName: displayNameEdit.value.trim(),
        description: descriptionEdit.value.trim(),
        triggers,
        profileTheme: {
          primaryColor: document.getElementById('primaryColor').value,
          secondaryColor: document.getElementById('secondaryColor').value,
          textColor: document.getElementById('textColor').value
        }
      };
      
      try {
        const submitButton = profileEditForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';
        
        const response = await fetch(`/bambis/api/profile/<%= bambi.username %>`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(profileData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // If there's a profile picture, upload it separately
          const profilePictureInput = document.getElementById('profilePictureEdit');
          
          if (profilePictureInput.files.length > 0) {
            submitButton.textContent = 'Uploading image...';
            
            const formData = new FormData();
            formData.append('profilePicture', profilePictureInput.files[0]);
            
            const pictureResponse = await fetch(`/bambis/api/profile/<%= bambi.username %>/picture`, {
              method: 'POST',
              body: formData
            });
            
            const pictureResult = await pictureResponse.json();
            
            if (pictureResult.success) {
              // Reload page to show updates
              window.location.reload();
            } else {
              alert(pictureResult.message || 'Failed to upload profile picture');
              submitButton.disabled = false;
              submitButton.textContent = 'Save Changes';
            }
          } else {
            // Reload page to show updates if no picture was uploaded
            window.location.reload();
          }
        } else {
          alert(result.message || 'Failed to update profile');
          submitButton.disabled = false;
          submitButton.textContent = 'Save Changes';
        }
      } catch (error) {
        console.error('Error updating profile:', error);
        alert('An error occurred while updating your profile');
        
        const submitButton = profileEditForm.querySelector('button[type="submit"]');
        submitButton.disabled = false;
        submitButton.textContent = 'Save Changes';
      }
    });
    
    // Theme customizer script
    const primaryColorInput = document.getElementById('primaryColor');
    const secondaryColorInput = document.getElementById('secondaryColor');
    const textColorInput = document.getElementById('textColor');
    const themePreview = document.getElementById('themePreview');
    
    function updateThemePreview() {
      const primary = primaryColorInput.value;
      const secondary = secondaryColorInput.value;
      const text = textColorInput.value;
      
      themePreview.style.background = `linear-gradient(135deg, ${primary} 0%, ${secondary} 100%)`;
      themePreview.style.color = text;
    }
    
    // Update on input change
    primaryColorInput.addEventListener('input', updateThemePreview);
    secondaryColorInput.addEventListener('input', updateThemePreview);
    textColorInput.addEventListener('input', updateThemePreview);
    
    // Initial update
    updateThemePreview();

    // Add heart functionality
    const heartButton = document.getElementById('heartButton');
    const heartCount = document.getElementById('heartCount');
    let isHearted = false;

    // Get cookie for current user
    const bambiname = getCookie('bambiname') || 'Anonymous';

    function getCookie(name) {
      const value = `; ${document.cookie}`;
      const parts = value.split(`; ${name}=`);
      if (parts.length === 2) return decodeURIComponent(parts.pop().split(';').shift());
      return null;
    }

    // Check initial heart status
    async function checkHeartStatus() {
      try {
        const response = await fetch(`/bambis/api/profile/<%= bambi.username %>/heart-status?currentUser=${encodeURIComponent(bambiname)}`);
        const result = await response.json();
        
        if (result.success) {
          isHearted = result.hearted;
          heartCount.textContent = result.heartCount;
          
          if (isHearted) {
            heartButton.classList.add('active');
          } else {
            heartButton.classList.remove('active');
          }
        }
      } catch (error) {
        console.error('Error checking heart status:', error);
      }
    }

    // Toggle heart when clicked
    heartButton.addEventListener('click', async function() {
      if (bambiname === 'Anonymous') {
        alert('Please log in to heart this profile');
        return;
      }
      
      try {
        const response = await fetch(`/bambis/api/profile/<%= bambi.username %>/heart`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            hearterUsername: bambiname
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          isHearted = result.hearted;
          heartCount.textContent = result.heartCount;
          
          if (isHearted) {
            heartButton.classList.add('active');
          } else {
            heartButton.classList.remove('active');
          }
        } else {
          alert(result.message || 'Failed to update heart');
        }
      } catch (error) {
        console.error('Error toggling heart:', error);
        alert('An error occurred while updating heart');
      }
    });

    // Check heart status on page load
    checkHeartStatus();
  });
</script>
</body>
</html>