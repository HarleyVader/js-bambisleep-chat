<!-- filepath: f:\js-bambisleep-chat\src\views\bambis\bambi-update.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('../../views/partials/head.ejs') %>
    <title>Update Profile | BambiSleep</title>
    <style>
        .profile-header {
            position: relative;
            height: 200px;
            background: linear-gradient(to right, <%=bambi.profileTheme?.primaryColor || 'var(--primary-color)' %>, <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>);
            border-radius: 8px;
            margin-bottom: 60px;
            overflow: hidden;
            box-shadow: 0 0 20px <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
        }

        .profile-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('<%= bambi.profileTheme?.customHeaderImage || (process.env.BASE_URL || "") + "/images/bambisleep-chat.gif" %>') center/cover;
            opacity: 0.2;
            mix-blend-mode: overlay;
        }

        .profile-avatar-large {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            position: relative;
            margin: -60px auto 20px;
            border: 5px solid var(--transparent);
            box-shadow: 0 0 20px <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
            overflow: hidden;
        }

        .profile-avatar-large img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .avatar-upload {
            position: absolute;
            bottom: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.5);
            border-radius: 50%;
            padding: 5px;
            cursor: pointer;
        }

        .form-section {
            background-color: var(--transparent);
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            border: 2px ridge <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>;
            box-shadow: 0 0 10px <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: var(--primary-alt);
            font-weight: bold;
        }

        .form-control {
            width: 100%;
            padding: 10px;
            background-color: rgba(18, 65, 65, 0.3);
            border: 1px solid var(--tertiary-color);
            border-radius: 4px;
            color: var(--primary-alt);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
        }

        .color-inputs {
            display: flex;
            gap: 20px;
        }

        .color-input-group {
            flex: 1;
        }

        .triggers-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }

        .trigger-tag {
            background-color: <%=bambi.profileTheme?.primaryColor || 'var(--tertiary-color)' %>;
            color: var(--primary-alt);
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .trigger-tag span {
            cursor: pointer;
        }

        .trigger-tag .remove {
            cursor: pointer;
            font-weight: bold;
        }

        .add-trigger {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .submit-button {
            background-color: var(--button-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .submit-button:hover {
            background-color: var(--tertiary-color);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px 20px;
            border-radius: 4px;
            color: white;
            z-index: 1000;
            animation: slideIn 0.3s ease-out;
        }

        .notification.success {
            background-color: #4CAF50;
        }

        .notification.error {
            background-color: #F44336;
        }

        .notification.info {
            background-color: #2196F3;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
            }
            to {
                transform: translateX(0);
            }
        }
    </style>
</head>

<body>
    <%- include('../../views/partials/nav.ejs') %>

    <div class="container">
        <h1 class="page-title">Update Your Profile</h1>
        
        <form id="profile-form" enctype="multipart/form-data">
            <div class="profile-header"></div>

            <div class="profile-avatar-large">
                <img src="<%= bambi.profilePictureUrl || `/bambis/${bambi.username}/avatar` %>" alt="<%= bambi.displayName || bambi.username %>" id="avatar-preview">
                <label for="avatar-upload" class="avatar-upload">
                    <i class="fas fa-camera"></i>
                </label>
                <input type="file" id="avatar-upload" name="profilePicture" style="display: none;" accept="image/*">
            </div>

            <div class="form-section">
                <div class="form-group">
                    <label for="displayName">Display Name</label>
                    <input type="text" id="displayName" name="displayName" class="form-control" value="<%= bambi.displayName || bambi.username %>">
                </div>

                <div class="form-group">
                    <label for="description">About Me</label>
                    <textarea id="description" name="description" class="form-control"><%= bambi.description || '' %></textarea>
                </div>
            </div>

            <div class="form-section">
                <h3 class="section-title">Profile Theme</h3>
                
                <div class="form-group">
                    <label for="headerImage">Custom Header Image URL (optional)</label>
                    <input type="text" id="headerImage" name="profileTheme[customHeaderImage]" class="form-control" 
                        value="<%= bambi.profileTheme?.customHeaderImage || '' %>" 
                        placeholder="https://example.com/your-image.jpg">
                </div>
                
                <div class="color-inputs">
                    <div class="color-input-group">
                        <label for="primaryColor">Primary Color</label>
                        <input type="color" id="primaryColor" name="profileTheme[primaryColor]" class="form-control" 
                            value="<%= bambi.profileTheme?.primaryColor || '#2a9d8f' %>">
                    </div>
                    
                    <div class="color-input-group">
                        <label for="secondaryColor">Secondary Color</label>
                        <input type="color" id="secondaryColor" name="profileTheme[secondaryColor]" class="form-control" 
                            value="<%= bambi.profileTheme?.secondaryColor || '#e76f51' %>">
                    </div>
                    
                    <div class="color-input-group">
                        <label for="textColor">Text Color</label>
                        <input type="color" id="textColor" name="profileTheme[textColor]" class="form-control" 
                            value="<%= bambi.profileTheme?.textColor || '#ffffff' %>">
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="section-title">Favorite Triggers</h3>
                
                <div class="triggers-container" id="triggers-container">
                    <% if (bambi.triggers && bambi.triggers.length > 0) { %>
                        <% bambi.triggers.forEach(trigger => { %>
                            <div class="trigger-tag">
                                <span><%= trigger %></span>
                                <span class="remove">Ã—</span>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
                
                <div class="add-trigger">
                    <input type="text" id="new-trigger" class="form-control" placeholder="Add new trigger...">
                    <button type="button" id="add-trigger-btn" class="btn">Add</button>
                </div>
                
                <!-- Hidden input to store triggers as JSON -->
                <input type="hidden" id="triggers-input" name="triggers">
            </div>

            <button type="submit" class="submit-button">Save Changes</button>
        </form>
    </div>

    <%- include('../../views/partials/footer.ejs') %>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Avatar upload preview
            const avatarUpload = document.getElementById('avatar-upload');
            const avatarPreview = document.getElementById('avatar-preview');
            
            avatarUpload.addEventListener('change', function() {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        avatarPreview.src = e.target.result;
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });

            // Trigger tags management
            const triggersContainer = document.getElementById('triggers-container');
            const newTriggerInput = document.getElementById('new-trigger');
            const addTriggerBtn = document.getElementById('add-trigger-btn');
            const triggersInput = document.getElementById('triggers-input');

            // Function to update the hidden input with current triggers
            function updateTriggersInput() {
                const triggers = Array.from(
                    document.querySelectorAll('.trigger-tag span:first-child')
                ).map(el => el.textContent.trim());
                
                triggersInput.value = JSON.stringify(triggers);
            }

            // Initialize hidden input
            updateTriggersInput();

            // Add new trigger
            addTriggerBtn.addEventListener('click', function() {
                const triggerText = newTriggerInput.value.trim();
                if (!triggerText) return;

                const triggerTag = document.createElement('div');
                triggerTag.className = 'trigger-tag';
                triggerTag.innerHTML = `
                    <span>${triggerText}</span>
                    <span class="remove">Ã—</span>
                `;

                triggerTag.querySelector('.remove').addEventListener('click', function() {
                    triggerTag.remove();
                    updateTriggersInput();
                });

                triggersContainer.appendChild(triggerTag);
                newTriggerInput.value = '';
                updateTriggersInput();
            });

            // Allow pressing Enter to add trigger
            newTriggerInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    addTriggerBtn.click();
                }
            });

            // Set up click listeners for existing trigger removals
            document.querySelectorAll('.trigger-tag .remove').forEach(removeBtn => {
                removeBtn.addEventListener('click', function() {
                    this.parentElement.remove();
                    updateTriggersInput();
                });
            });

            // Form submission
            const profileForm = document.getElementById('profile-form');
            profileForm.addEventListener('submit', function(event) {
                event.preventDefault();
                
                // Update triggers input one final time before submission
                updateTriggersInput();
                
                // Create FormData object
                const formData = new FormData(this);
                
                // Send data to server
                fetch('/bambis/api/update-profile', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(err => {
                            throw new Error(`Server error: ${err.message || response.statusText}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Profile updated successfully:', data);
                    
                    if (data.redirect) {
                        // Show success message before redirect
                        showNotification('Profile updated successfully!', 'success');
                        
                        // Redirect to profile page after short delay
                        setTimeout(() => {
                            window.location.href = data.redirect;
                        }, 1500);
                    } else {
                        showNotification(data.message || 'Profile updated successfully!', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error updating profile:', error);
                    showNotification('Failed to update profile: ' + error.message, 'error');
                });
            });

            // Notification helper function
            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                setTimeout(() => {
                    notification.remove();
                }, 5000);
            }
        });
    </script>
</body>
</html>