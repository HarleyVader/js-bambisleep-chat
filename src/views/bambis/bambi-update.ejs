<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('../../views/partials/head.ejs') %>
        <title>
            Update <%= bambi.displayName || bambi.username %>'s Profile
        </title>
        <style>
            .profile-header {
                position: relative;
                height: 200px;
                background: linear-gradient(to right, <%=bambi.profileTheme?.primaryColor || 'var(--primary-color)' %>, <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>);
                border-radius: 8px;
                margin-bottom: 60px;
                overflow: hidden;
                box-shadow: 0 0 20px <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
            }

            .profile-header::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('<%= bambi.profileTheme?.customHeaderImage || (process.env.BASE_URL || "") + "/images/bambisleep-chat.gif" %>') center/cover;
                opacity: 0.2;
                mix-blend-mode: overlay;
            }

            .profile-avatar-large {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                position: relative;
                margin: -60px auto 20px;
                border: 5px solid var(--transparent);
                box-shadow: 0 0 20px <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
                overflow: hidden;
            }

            .profile-avatar-large img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .profile-actions {
                position: absolute;
                bottom: 20px;
                right: 20px;
            }

            .profile-form {
                background-color: var(--transparent);
                border-top: var(--button-color) 3px ridge;
                border-bottom: var(--button-color) 3px ridge;
                border-left: var(--secondary-alt) 1px groove;
                border-right: var(--secondary-alt) 1px groove;
                border-radius: 8px;
                box-shadow: 0 0 10px var(--button-color);
                padding: 2rem;
                margin-bottom: 2rem;
            }

            .form-group {
                margin-bottom: 1.5rem;
            }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
                color: var(--primary-alt);
                font-size: 1.1rem;
            }

            .color-picker-container {
                display: flex;
                gap: 1rem;
                align-items: center;
            }

            .color-preview {
                width: 30px;
                height: 30px;
                border-radius: 50%;
                border: 2px solid var(--secondary-alt);
            }

            .profile-content {
                display: grid;
                grid-template-columns: 1fr 3fr;
                gap: 20px;
            }

            .profile-sidebar {
                background-color: var(--transparent);
                border-radius: 8px;
                padding: 20px;
                border: 2px ridge <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
                box-shadow: 0 0 10px <%=bambi.profileTheme?.primaryColor || 'var(--button-color)' %>;
            }

            .profile-main {
                background-color: var(--transparent);
                border-radius: 8px;
                padding: 20px;
                border: 2px ridge <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>;
                box-shadow: 0 0 10px <%=bambi.profileTheme?.secondaryColor || 'var(--tertiary-color)' %>;
            }

            .profile-name-large {
                font-size: 2rem;
                color: <%=bambi.profileTheme?.textColor || 'var(--button-color)' %>;
                margin: 10px 0;
                text-align: center;
                animation: flicker 5s infinite;
            }

            .profile-username {
                font-size: 1rem;
                color: var(--nav-alt);
                text-align: center;
                margin-bottom: 20px;
            }
            
            .triggers-container {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                margin-top: 0.5rem;
            }
            
            .trigger-tag {
                display: inline-block;
                background-color: var(--primary-color);
                color: var(--primary-alt);
                padding: 5px 10px;
                border-radius: 15px;
                border: 1px solid var(--button-color);
                display: flex;
                align-items: center;
            }
            
            .trigger-tag button {
                background: none;
                border: none;
                color: var(--button-color);
                margin-left: 5px;
                cursor: pointer;
                font-size: 1rem;
                padding: 0 2px;
            }
            
            #add-trigger-form {
                display: flex;
                margin-top: 0.5rem;
                gap: 0.5rem;
            }
            
            #new-trigger {
                flex: 1;
            }
            
            .seasons-container {
                display: flex;
                flex-wrap: wrap;
                gap: 0.5rem;
                margin-top: 0.5rem;
            }
            
            .season-checkbox {
                display: inline-flex;
                align-items: center;
                gap: 0.5rem;
                padding: 8px 12px;
                background-color: var(--primary-color);
                border-radius: 15px;
                border: 1px solid var(--secondary-alt);
            }
            
            .season-checkbox input {
                width: auto;
                margin: 0;
            }

            .notification {
                position: fixed;
                bottom: 20px;
                right: 20px;
                padding: 10px 20px;
                border-radius: 4px;
                color: white;
                z-index: 1000;
                animation: slideIn 0.3s ease-out;
            }

            .notification.success {
                background-color: #4CAF50;
            }

            .notification.error {
                background-color: #F44336;
            }

            .notification.info {
                background-color: #2196F3;
            }

            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                }

                to {
                    transform: translateX(0);
                }
            }

            @media (max-width: 768px) {
                .profile-content {
                    grid-template-columns: 1fr;
                }
            }
        </style>
</head>

<body>
    <%- include('../../views/partials/nav.ejs') %>

    <div class="container">
        <div class="profile-header">
            <% if (bambiCookie === bambi.username) { %>
                <div class="profile-actions">
                    <a href="/bambis/<%= bambi.username %>" class="btn">View Profile</a>
                </div>
            <% } else { %>
                <div class="profile-actions">
                    <a href="/bambis/<%= bambi.username %>" class="btn">Back to Profile</a>
                </div>
            <% } %>
        </div>

        <% if (bambiCookie !== bambi.username) { %>
            <div class="error-message" style="background-color: var(--error-bg); color: var(--error); padding: 10px; margin: 20px auto; border-radius: 4px; max-width: 800px; text-align: center;">
                You can only edit your own profile. <a href="/bambis/<%= bambi.username %>">Back to profile</a>
            </div>
        <% } else { %>
            <form id="profile-update-form" enctype="multipart/form-data" class="profile-form">
                <h1 class="profile-name-large">Update Your Profile</h1>
                
                <div class="profile-avatar-large">
                    <img id="avatar-preview-img" src="<%= bambi.profilePictureUrl || `/bambis/${bambi.username}/avatar` %>" alt="<%= bambi.displayName || bambi.username %>">
                </div>
                
                <div class="form-group">
                    <label for="avatar">Profile Picture</label>
                    <input type="file" id="avatar" name="avatar" accept="image/jpeg,image/jpg,image/png,image/gif">
                    <small>Max size: 10MB. Supported formats: JPEG, JPG, PNG, GIF</small>
                </div>
                
                <div class="form-group">
                    <label for="username">Username (cannot be changed)</label>
                    <input type="text" id="username" name="username" value="<%= bambi.username %>" readonly>
                </div>
                
                <div class="form-group">
                    <label for="displayName">Display Name</label>
                    <input type="text" id="displayName" name="displayName" value="<%= bambi.displayName %>" required>
                </div>
                
                <div class="form-group">
                    <label for="description">About Me</label>
                    <textarea id="description" name="description" rows="4" maxlength="500"><%= bambi.description %></textarea>
                    <small><span id="description-chars"><%= (bambi.description || '').length %></span>/500 characters</small>
                </div>
                
                <div class="form-group">
                    <label for="woodland">Woodland Home</label>
                    <input type="text" id="woodland" name="woodland" value="<%= bambi.woodland || 'Sleepy Meadow' %>">
                </div>
                
                <div class="form-group">
                    <label>Favorite Seasons</label>
                    <div class="seasons-container">
                        <label class="season-checkbox">
                            <input type="checkbox" name="favoriteSeasons" value="spring" <% if (bambi.favoriteSeasons && bambi.favoriteSeasons.includes('spring')) { %>checked<% } %>>
                            Spring
                        </label>
                        <label class="season-checkbox">
                            <input type="checkbox" name="favoriteSeasons" value="summer" <% if (bambi.favoriteSeasons && bambi.favoriteSeasons.includes('summer')) { %>checked<% } %>>
                            Summer
                        </label>
                        <label class="season-checkbox">
                            <input type="checkbox" name="favoriteSeasons" value="autumn" <% if (bambi.favoriteSeasons && bambi.favoriteSeasons.includes('autumn')) { %>checked<% } %>>
                            Autumn
                        </label>
                        <label class="season-checkbox">
                            <input type="checkbox" name="favoriteSeasons" value="winter" <% if (bambi.favoriteSeasons && bambi.favoriteSeasons.includes('winter')) { %>checked<% } %>>
                            Winter
                        </label>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Profile Theme Colors</label>
                    
                    <div class="color-picker-container">
                        <label for="primaryColor">Primary:</label>
                        <input type="color" id="primaryColor" name="primaryColor" value="<%= bambi.profileTheme?.primaryColor || '#fa81ff' %>">
                        <div class="color-preview" id="primary-preview" style="background-color: <%= bambi.profileTheme?.primaryColor || '#fa81ff' %>;"></div>
                    </div>
                    
                    <div class="color-picker-container">
                        <label for="secondaryColor">Secondary:</label>
                        <input type="color" id="secondaryColor" name="secondaryColor" value="<%= bambi.profileTheme?.secondaryColor || '#ff4fa2' %>">
                        <div class="color-preview" id="secondary-preview" style="background-color: <%= bambi.profileTheme?.secondaryColor || '#ff4fa2' %>;"></div>
                    </div>
                    
                    <div class="color-picker-container">
                        <label for="textColor">Text:</label>
                        <input type="color" id="textColor" name="textColor" value="<%= bambi.profileTheme?.textColor || '#ffffff' %>">
                        <div class="color-preview" id="text-preview" style="background-color: <%= bambi.profileTheme?.textColor || '#ffffff' %>;"></div>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Favorite Triggers</label>
                    <div class="triggers-container" id="triggers-container">
                        <% if (bambi.triggers && bambi.triggers.length > 0) { %>
                            <% bambi.triggers.forEach((trigger, index) => { %>
                                <div class="trigger-tag">
                                    <span><%= trigger %></span>
                                    <button type="button" class="remove-trigger" data-index="<%= index %>">×</button>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                    
                    <div id="add-trigger-form">
                        <input type="text" id="new-trigger" placeholder="Add a trigger...">
                        <button type="button" id="add-trigger-btn">Add</button>
                    </div>
                    <small>Add words or phrases that trigger you (max 10)</small>
                </div>
                
                <div class="form-group" style="margin-top: 2rem; text-align: center;">
                    <button type="submit" class="submit-btn">Save Profile</button>
                    <a href="/bambis/<%= bambi.username %>" class="btn" style="margin-left: 1rem;">Cancel</a>
                </div>
            </form>
        <% } %>
    </div>

    <%- include('../../views/partials/footer.ejs') %>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            <% if (bambiCookie !== bambi.username) { %>
                // If not the profile owner, don't initialize editing functionality
                return;
            <% } %>

            const socket = io();
            const triggers = <%= JSON.stringify(bambi.triggers || []) %>;
            
            // Setup trigger management
            function renderTriggers() {
                const container = document.getElementById('triggers-container');
                container.innerHTML = '';
                
                triggers.forEach((trigger, index) => {
                    const tag = document.createElement('div');
                    tag.className = 'trigger-tag';
                    tag.innerHTML = `
                        <span>${trigger}</span>
                        <button type="button" class="remove-trigger" data-index="${index}">×</button>
                    `;
                    container.appendChild(tag);
                });
                
                // Add event listeners to delete buttons
                document.querySelectorAll('.remove-trigger').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const index = parseInt(this.dataset.index);
                        triggers.splice(index, 1);
                        renderTriggers();
                    });
                });
            }
            
            document.getElementById('add-trigger-btn').addEventListener('click', function() {
                const input = document.getElementById('new-trigger');
                const trigger = input.value.trim();
                
                if (trigger && !triggers.includes(trigger) && triggers.length < 10) {
                    triggers.push(trigger);
                    renderTriggers();
                    input.value = '';
                } else if (triggers.length >= 10) {
                    showNotification('Maximum 10 triggers allowed', 'error');
                }
            });
            
            // Handle file upload preview
            document.getElementById('avatar').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        document.getElementById('avatar-preview-img').src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Handle description character count
            document.getElementById('description').addEventListener('input', function(e) {
                const length = e.target.value.length;
                document.getElementById('description-chars').textContent = length;
            });
            
            // Handle color pickers
            document.getElementById('primaryColor').addEventListener('input', function(e) {
                document.getElementById('primary-preview').style.backgroundColor = e.target.value;
            });
            
            document.getElementById('secondaryColor').addEventListener('input', function(e) {
                document.getElementById('secondary-preview').style.backgroundColor = e.target.value;
            });
            
            document.getElementById('textColor').addEventListener('input', function(e) {
                document.getElementById('text-preview').style.backgroundColor = e.target.value;
            });
            
            // Handle form submission
            document.getElementById('profile-update-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                
                // Get selected seasons
                const seasonCheckboxes = document.querySelectorAll('input[name="favoriteSeasons"]:checked');
                const seasons = Array.from(seasonCheckboxes).map(cb => cb.value);
                
                // Remove all favoriteSeasons fields and add the array
                for (const pair of formData.entries()) {
                    if (pair[0] === 'favoriteSeasons') {
                        formData.delete(pair[0]);
                    }
                }
                
                // Add seasons as a JSON string
                formData.append('favoriteSeasons', JSON.stringify(seasons));
                
                // Add triggers as a JSON string
                formData.append('triggers', JSON.stringify(triggers));
                
                try {
                    const response = await fetch('/bambis/api/update-profile', {
                        method: 'POST',
                        body: formData
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        showNotification('Profile updated successfully!', 'success');
                        
                        // Redirect to profile page after a short delay
                        setTimeout(() => {
                            window.location.href = `/bambis/<%= bambi.username %>`;
                        }, 1500);
                    } else {
                        showNotification('Error: ' + (data.message || 'Unknown error'), 'error');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showNotification('Error updating profile. Please try again.', 'error');
                }
            });
            
            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.textContent = message;
                
                document.body.appendChild(notification);
                
                // Remove notification after animation completes
                setTimeout(() => {
                    notification.remove();
                }, 4000);
            }
            
            // Initialize the triggers UI
            renderTriggers();
        });
    </script>
</body>
</html>