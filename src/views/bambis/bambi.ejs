<!DOCTYPE html>
<html lang="en">
<%- include('../partials/head.ejs', { title: `${bambi.displayName || bambi.username}'s bambi` }) %>

  <body>
    <%- include('../partials/nav.ejs') %>

      <div class="container">
        <% if (typeof error !=='undefined' && error) { %>
          <div class="error-message">
            <%= typeof errorMessage !=='undefined' ? errorMessage : 'An error occurred' %>
          </div>
          <% } %>

            <div class="bambi-container" data-username="<%= bambi.username %>">
              <!-- User identity section with integrated header and neonwave styling -->
              <div class="bambi-identity-section neonwave">
                <!-- Header image moved inside identity section -->
                <div class="bambi-header-image" style="background-image: url('<%= bambi.headerImage || '/gif/default-header.gif' %>'); background-color: <%= bambi.headerColor %>;">
                </div>

                <!-- bambi content container that includes avatar and info -->
                <div class="bambi-info-container">
                  <div class="avatar-container">
                    <img src="<%= bambi.avatar || '/gif/default-avatar.gif' %>"
                      alt="<%= bambi.displayName || bambi.username %>" class="bambi-avatar neon-glow">
                    <div class="avatar-neon-ring"></div>
                  </div>

                  <div class="bambi-info">
                    <div class="bambi-header-flex">
                      <h1 class="bambi-username neon-text">
                        <%= bambi.displayName || bambi.username %>
                      </h1>

                      <div class="user-stats-container">
                        <div class="user-stat">
                          <div class="stat-icon level-icon">‚≠ê</div>
                          <div class="stat-value">
                            <%= bambi.level || '1' %>
                          </div>
                          <div class="stat-label">Level</div>
                        </div>
                        <div class="user-stat">
                          <div class="stat-icon hearts-icon">‚ù§Ô∏è</div>
                          <div class="stat-value">
                            <%= bambi.hearts || '0' %>
                          </div>
                          <div class="stat-label">Hearts</div>
                        </div>
                        <div class="user-stat">
                          <div class="stat-icon scrapes-icon">üîÑ</div>
                          <div class="stat-value">
                            <%= bambi.scrapes || '0' %>
                          </div>
                          <div class="stat-label">Scrapes</div>
                        </div>
                        <div class="user-stat">
                          <div class="stat-icon controls-icon">‚öôÔ∏è</div>
                          <div class="stat-value">
                            <%= bambi.controls || '0' %>
                          </div>
                          <div class="stat-label">Controls</div>
                        </div>
                      </div>
                    </div>

                    <div class="bambi-about clickable-links neon-text-subtle">
                      <%- 
                        bambi.about ? sanitizeHtml(bambi.about, {
                          allowedTags: [],
                          allowedAttributes: {}
                        }).replace(/https?:\/\/[^\s]+/g, '<a href="$&" target="_blank" rel="noopener noreferrer" class="neon-link">$&</a>') 
                        : 'No description available'
                      %>
                    </div>

                    <div class="bambi-description-container cyber-panel">
                      <h2 class="neon-heading">Description</h2>
                      <div class="bambi-description cyber-text">
                        <%= bambi.description || 'No description available' %>
                      </div>
                    </div>

                    <% if (isOwnbambi) { %>
                      <div class="bambi-actions">
                        <button id="edit-bambi-btn" class="neon-button">Edit bambi</button>
                        <button id="delete-bambi-btn" class="neon-button danger">Delete bambi</button>
                      </div>
                      <% } %>
                  </div>
                </div>
              </div>

              <!-- Rest of your content... -->
            </div>

            <!-- bambi Edit Modal -->
            <div id="bambi-edit-modal" class="modal">
              <div class="modal-content">
                <span class="close">&times;</span>
                <h2>Edit Your Bambi</h2>
                <form id="edit-bambi-form" class="bambi-form" action="/bambi/update" method="POST" enctype="multipart/form-data">
                  <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                  <div class="form-group">
                    <label for="avatar">Avatar Image</label>
                    <input type="file" id="avatar" name="avatar" accept="image/*">
                    <small>Current: <%= bambi.avatar || 'Default avatar' %></small>
                  </div>
                  
                  <div class="form-group">
                    <label for="headerImage">Header Image</label>
                    <input type="file" id="headerImage" name="headerImage" accept="image/*">
                    <small>Current: <%= bambi.headerImage || 'Default header' %></small>
                  </div>
                  
                  <div class="form-group">
                    <label for="headerColor">Header Color</label>
                    <input type="color" id="headerColor" name="headerColor" value="<%= bambi.headerColor || '#000000' %>">
                  </div>
                  
                  <div class="form-group">
                    <label for="about">About (Short Bio)</label>
                    <textarea id="about" name="about" rows="2" maxlength="150"><%= bambi.about || '' %></textarea>
                    <small>Brief intro (150 chars max). Links will be clickable.</small>
                  </div>
                  
                  <div class="form-group">
                    <label for="description">Full Description</label>
                    <textarea id="description" name="description" rows="4"><%= bambi.description || '' %></textarea>
                    <small>Tell us more about your bambi</small>
                  </div>
                  
                  <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="email" value="<%= user.email || '' %>">
                  </div>
                  
                  <div class="form-group">
                    <label for="currentPassword">Current Password</label>
                    <input type="password" id="currentPassword" name="currentPassword">
                    <small>Required to confirm changes</small>
                  </div>
                  
                  <div class="form-group">
                    <label for="newPassword">New Password (Optional)</label>
                    <input type="password" id="newPassword" name="newPassword">
                    <small>Leave blank to keep current password</small>
                  </div>
                  
                  <div class="form-group">
                    <label for="confirmPassword">Confirm New Password</label>
                    <input type="password" id="confirmPassword" name="confirmPassword">
                  </div>
                  
                  <div class="form-actions">
                    <button type="button" class="cancel-btn">Cancel</button>
                    <button type="submit" class="save-btn">Save Changes</button>
                  </div>
                </form>
              </div>
            </div>

            <div class="notification-area"></div>
      </div>

      <%- include('../partials/footer.ejs', { footer: typeof footer !== 'undefined' ? footer : {} }) %>

        <script src="/socket.io/socket.io.js"></script>
        <script src="/js/socket-client.js"></script>
        <script>
          document.addEventListener('DOMContentLoaded', function() {
            if (!window.BambiSocket) {
              console.error('BambiSocket not found. Make sure socket-client.js is loaded.');
              window.BambiSocket.initialize();  // Will throw error if BambiSocket is undefined
            }
            
            // Set up bambi-specific event listeners
            if (window.BambiSocket && typeof window.BambiSocket.on === 'function') {
              window.BambiSocket.on('bambi_update', (data) => {
                if (data.username === '<%= bambi.username %>') {
                  console.log('Bambi update received', data);
                  // Update UI as needed
                }
              });
              
              // If this is the user's own bambi profile, set up edit functionality
              <% if (isOwnbambi) { %>
              const editBtn = document.getElementById('edit-bambi-btn');
              if (editBtn) {
                editBtn.addEventListener('click', function() {
                  const modal = document.getElementById('bambi-edit-modal');
                  if (modal) modal.style.display = 'block';
                });
              }
              
              const deleteBtn = document.getElementById('delete-bambi-btn');
              if (deleteBtn) {
                deleteBtn.addEventListener('click', function() {
                  if (confirm('Are you sure you want to delete your bambi?')) {
                    try {
                      window.BambiSocket.sendMessage('bambi_action', {
                        action: 'delete',
                        username: '<%= bambi.username %>'
                      });
                      
                      // Listen for confirmation before redirecting
                      window.BambiSocket.on('bambi_deleted', (data) => {
                        if (data.username === '<%= bambi.username %>') {
                          window.location.href = '/?deleted=true';
                        }
                      });
                      
                      // Add timeout in case no response
                      setTimeout(() => {
                        window.location.href = '/';
                      }, 3000);
                    } catch (e) {
                      console.error('Error deleting bambi:', e);
                      alert('There was an error deleting your bambi. Please try again.');
                    }
                  }
                });
              }
              <% } %>
            }

            // File upload preview
            const avatarInput = document.getElementById('avatar');
            const headerImageInput = document.getElementById('headerImage');

            if (avatarInput) {
              avatarInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                  const reader = new FileReader();
                  reader.onload = function(e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.innerHTML = `<img src="${e.target.result}" alt="Avatar Preview">`;
                    
                    // Remove any existing preview
                    const existingPreview = avatarInput.nextElementSibling.nextElementSibling;
                    if (existingPreview && existingPreview.className === 'image-preview') {
                      existingPreview.remove();
                    }
                    
                    avatarInput.parentNode.insertBefore(preview, avatarInput.nextElementSibling.nextSibling);
                  }
                  reader.readAsDataURL(this.files[0]);
                }
              });
            }

            if (headerImageInput) {
              headerImageInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                  const reader = new FileReader();
                  reader.onload = function(e) {
                    const preview = document.createElement('div');
                    preview.className = 'image-preview';
                    preview.innerHTML = `<img src="${e.target.result}" alt="Header Preview">`;
                    
                    // Remove any existing preview
                    const existingPreview = headerImageInput.nextElementSibling.nextElementSibling;
                    if (existingPreview && existingPreview.className === 'image-preview') {
                      existingPreview.remove();
                    }
                    
                    headerImageInput.parentNode.insertBefore(preview, headerImageInput.nextElementSibling.nextSibling);
                  }
                  reader.readAsDataURL(this.files[0]);
                }
              });
            }

            // Check server-side authentication status
            fetch('/api/auth/status')
              .then(res => res.json())
              .then(data => {
                if (!data.authenticated) {
                  modal.style.display = 'block';
                } else {
                  window.username = data.username;
                }
              })
              .catch(err => {
                console.error('Authentication check failed:', err);
                modal.style.display = 'block';
              });
          });
        </script>
  </body>

</html>