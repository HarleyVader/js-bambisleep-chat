<!DOCTYPE html>
<html lang="en">
<%- include('./partials/head', { title: `${profile.displayName || profile.username}'s Profile` }) %>

<body data-username="<%= profile.username %>">
  <%- include('./partials/nav') %>

  <div class="container">
    <div class="profile-container">
      <!-- User identity section with integrated header and neonwave styling -->
      <div class="profile-identity-section neonwave">
        <!-- Header image moved inside identity section -->
        <div class="profile-header-image" style="background-image: url('<%= profile.headerImage || "/gif/default-header.gif" %>'); background-color: <%= profile.headerColor %>;">
        </div>
        
        <!-- Profile content container that includes avatar and info -->
        <div class="profile-info-container">
          <div class="avatar-container">
            <img src="<%= profile.avatar || '/gif/default-avatar.gif' %>" alt="<%= profile.displayName || profile.username %>" class="profile-avatar neon-glow">
            <div class="avatar-neon-ring"></div>
          </div>
          
          <div class="profile-info">
            <div class="profile-header-flex">
              <h1 class="profile-username neon-text">
                <%= profile.displayName || profile.username %>
              </h1>
              
              <div class="user-stats-container">
                <div class="user-stat">
                  <div class="stat-icon level-icon">‚≠ê</div>
                  <div class="stat-value"><%= profile.level || '1' %></div>
                  <div class="stat-label">Level</div>
                </div>
                <div class="user-stat">
                  <div class="stat-icon hearts-icon">‚ù§Ô∏è</div>
                  <div class="stat-value"><%= profile.hearts || '0' %></div>
                  <div class="stat-label">Hearts</div>
                </div>
                <div class="user-stat">
                  <div class="stat-icon scrapes-icon">üîÑ</div>
                  <div class="stat-value"><%= profile.scrapes || '0' %></div>
                  <div class="stat-label">Scrapes</div>
                </div>
                <div class="user-stat">
                  <div class="stat-icon controls-icon">‚öôÔ∏è</div>
                  <div class="stat-value"><%= profile.controls || '0' %></div>
                  <div class="stat-label">Controls</div>
                </div>
              </div>
            </div>
            
            <div class="profile-about clickable-links neon-text-subtle">
              <%- profile.about.replace(/https?:\/\/[^\s]+/g, '<a href="$&" target="_blank" rel="noopener noreferrer" class="neon-link">$&</a>') %>
            </div>

            <div class="profile-description-container cyber-panel">
              <h2 class="neon-heading">Description</h2>
              <div class="profile-description cyber-text">
                <%= profile.description %>
              </div>
            </div>

            <% if (isOwnProfile) { %>
            <div class="profile-actions">
              <button id="edit-profile-btn" class="neon-button">Edit Profile</button>
              <button id="delete-profile-btn" class="neon-button danger">Delete Profile</button>
            </div>
            <% } %>
          </div>
        </div>
      </div>

      <div class="profile-content">
        <!-- Triggers Section - First content section -->
        <div class="profile-section">
          <h2>Triggers</h2>

          <div id="active-trigger-session" style="display: block;" class="trigger-session-info">
            <!-- Session info will be populated by JavaScript -->
          </div>

          <div class="triggers-container">
            <div class="profile-triggers">
              <div class="trigger-item active">
                <div class="trigger-header">
                  <h4>BAMBI SLEEP</h4>
                  <div class="trigger-controls">
                    <label class="switch">
                      <input type="checkbox" class="trigger-toggle" data-trigger="BAMBI SLEEP" checked>
                      <span class="slider round"></span>
                    </label>
                  </div>
                </div>
                <p class="trigger-description">The foundational trigger for all bambi dolls</p>
              </div>
            </div>

            <div class="add-trigger-container">
              <h3>Add Trigger</h3>
              <form class="trigger-form" id="add-trigger-form">
                <div class="form-group">
                  <label for="trigger-name">Name</label>
                  <input type="text" id="trigger-name" name="name" required>
                </div>
                <div class="form-group">
                  <label for="trigger-description">Description</label>
                  <textarea id="trigger-description" name="description" rows="3"></textarea>
                </div>
                <button type="submit" class="add-trigger-btn">Add Trigger</button>
              </form>
            </div>
          </div>
        </div>

        <!-- Profile Settings only shown for profile owner -->
        <% if (isOwnProfile) { %>
          
          
        <% } %>
      </div>
    </div>
  </div>

  <!-- Enhanced Profile Edit Modal with Neonwave Styling -->
  <div id="profile-edit-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Edit Profile</h2>
        <span class="close-modal">&times;</span>
      </div>
      <div class="modal-body">
        <form id="edit-profile-form" class="profile-form">
          <input type="hidden" name="username" value="<%= profile.username %>">

          <div class="input-container">
            <label for="displayName">Display Name</label>
            <input type="text" id="displayName" name="displayName" value="<%= profile.displayName || profile.username %>" required>
          </div>

          <div class="input-container">
            <label for="avatar">Avatar URL:</label>
            <input type="text" id="avatar" name="avatar" value="<%= profile.avatar %>" placeholder="/gif/default-avatar.gif">
            <div class="preview">
              <img src="<%= profile.avatar || '/gif/default-avatar.gif' %>" alt="Avatar Preview" id="avatar-preview">
            </div>
          </div>

          <div class="input-container">
            <label for="headerImage">Header Image URL:</label>
            <input type="text" id="headerImage" name="headerImage" value="<%= profile.headerImage %>" placeholder="/gif/default-header.gif">
            <div class="preview">
              <img src="<%= profile.headerImage || '/gif/default-header.gif' %>" alt="Header Preview" id="header-preview" style="border-radius: 4px; max-width: 200px; height: auto;">
            </div>
          </div>

          <div class="input-container">
            <label for="headerColor">Header Color</label>
            <input type="color" id="headerColor" name="headerColor" value="<%= profile.headerColor || '#35424a' %>">
          </div>

          <div class="input-container">
            <label for="about">About (150 chars max):</label>
            <textarea id="about" name="about" maxlength="150" placeholder="Brief intro (150 chars max)"><%= profile.about %></textarea>
            <div class="char-counter"><span id="about-counter">0</span>/150</div>
          </div>

          <div class="input-container">
            <label for="description">Description (1500 chars max):</label>
            <textarea id="description" name="description" maxlength="1500" rows="5" placeholder="Your full bambi journey (1500 chars max)"><%= profile.description %></textarea>
            <div class="char-counter"><span id="description-counter">0</span>/1500</div>
          </div>

          <div class="form-actions">
            <button type="submit" class="save-btn">Save Changes</button>
            <button type="button" id="close-modal-btn" class="cancel-btn">Cancel</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <div class="notification-area"></div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/trigger-client.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      // Modal functionality
      const modal = document.getElementById('profile-edit-modal');
      const editProfileBtn = document.getElementById('edit-profile-btn');
      const closeModalBtn = document.querySelector('.close-modal');
      const closeModalFooterBtn = document.getElementById('close-modal-btn');

      if (editProfileBtn) {
        editProfileBtn.addEventListener('click', function () {
          modal.style.display = 'block';
          document.body.style.overflow = 'hidden'; // Prevent background scrolling
        });
      }

      if (closeModalBtn) {
        closeModalBtn.addEventListener('click', function () {
          modal.style.display = 'none';
          document.body.style.overflow = ''; // Restore scrolling
        });
      }

      if (closeModalFooterBtn) {
        closeModalFooterBtn.addEventListener('click', function () {
          modal.style.display = 'none';
          document.body.style.overflow = ''; // Restore scrolling
        });
      }

      // Close modal when clicking outside
      window.addEventListener('click', function (event) {
        if (event.target === modal) {
          modal.style.display = 'none';
          document.body.style.overflow = ''; // Restore scrolling
        }
      });

      // Close modal on Escape key press
      document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape' && modal && modal.style.display === 'block') {
          modal.style.display = 'none';
          document.body.style.overflow = ''; // Restore scrolling
        }
      });

      // Define showNotification if not already defined
      if (typeof showNotification !== 'function') {
        window.showNotification = function (message, type = 'info') {
          const notificationArea = document.querySelector('.notification-area');
          if (!notificationArea) return;

          const notification = document.createElement('div');
          notification.className = `notification ${type}`;
          notification.textContent = message;

          notificationArea.appendChild(notification);

          setTimeout(() => {
            notification.classList.add('fade-out');
            setTimeout(() => {
              notification.remove();
            }, 300);
          }, 3000);
        };
      }

      // Animate stats counters
      function animateCounters() {
        document.querySelectorAll('.stat-value').forEach(counter => {
          const target = parseInt(counter.textContent, 10);
          let count = 0;
          const duration = 1500; // ms
          const increment = target / (duration / 30);
          
          const timer = setInterval(() => {
            count += increment;
            counter.textContent = Math.floor(count);
            
            if (count >= target) {
              counter.textContent = target;
              clearInterval(timer);
            }
          }, 30);
        });
      }
      
      // Call animateCounters after page load
      animateCounters();

      // Set up Intersection Observer for reveal animations
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('revealed');
            observer.unobserve(entry.target);
          }
        });
      }, {
        threshold: 0.2
      });
      
      // Observe all sections
      document.querySelectorAll('.profile-section').forEach(section => {
        observer.observe(section);
      });

      // Character counter functionality
      const aboutInput = document.getElementById('about');
      const aboutCounter = document.getElementById('about-counter');
      
      const descriptionInput = document.getElementById('description');
      const descriptionCounter = document.getElementById('description-counter');
      
      function updateCounter(input, counter, maxLength) {
        if (input && counter) {
          counter.textContent = input.value.length;
          if (input.value.length > maxLength) {
            counter.classList.add('over-limit');
          } else {
            counter.classList.remove('over-limit');
          }
        }
      }
      
      if (aboutInput && aboutCounter) {
        updateCounter(aboutInput, aboutCounter, 150);
        aboutInput.addEventListener('input', () => updateCounter(aboutInput, aboutCounter, 150));
      }
      
      if (descriptionInput && descriptionCounter) {
        updateCounter(descriptionInput, descriptionCounter, 1500);
        descriptionInput.addEventListener('input', () => updateCounter(descriptionInput, descriptionCounter, 1500));
      }
      
      // Avatar preview functionality
      const avatarInput = document.getElementById('avatar');
      const avatarPreview = document.getElementById('avatar-preview');
      
      if (avatarInput && avatarPreview) {
        avatarInput.addEventListener('input', () => {
          const url = avatarInput.value.trim();
          avatarPreview.src = url || '/gif/default-avatar.gif';
        });
      }
      
      // Header preview functionality
      const headerInput = document.getElementById('headerImage');
      const headerPreview = document.getElementById('header-preview');
      
      if (headerInput && headerPreview) {
        headerInput.addEventListener('input', () => {
          const url = headerInput.value.trim();
          headerPreview.src = url || '/gif/default-header.gif';
        });
      }
      
      // Form submission handling
      const form = document.getElementById('edit-profile-form');
      
      if (form) {
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const formData = new FormData(form);
          const username = formData.get('username');
          
          // Construct profile data
          const profileData = {
            displayName: formData.get('displayName'),
            avatar: formData.get('avatar'),
            headerImage: formData.get('headerImage'),
            headerColor: formData.get('headerColor'),
            about: formData.get('about'),
            description: formData.get('description')
          };
          
          try {
            // Send data to server via fetch
            const response = await fetch(`/profile/${username}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(profileData)
            });
            
            const data = await response.json();
            
            if (data.success) {
              showNotification('Profile updated successfully', 'success');
              
              // Close the modal
              modal.style.display = 'none';
              document.body.style.overflow = '';
              
              // Reload the page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showNotification(data.message || 'Failed to update profile', 'error');
            }
          } catch (error) {
            console.error('Error updating profile:', error);
            showNotification('An error occurred while updating profile', 'error');
          }
        });
      }
    });
  </script>

  <%- include('./partials/footer') %>
</body>
</html>