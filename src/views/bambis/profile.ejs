<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bambi Forest - My Profile</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <nav>
    <ul>
      <li><a href="/profile">My Woodland</a></li>
      <li><a href="/friends">Forest Friends</a></li>
      <li><a href="/logout">Leave Forest</a></li>
    </ul>
  </nav>

  <div class="container">
    <div class="profile-container">
      <div id="notification-area" class="notification-area" style="display: none;"></div>
      
      <div class="profile-header">
        <div class="avatar-container">
          <img src="/images/<%= profile.avatar %>" alt="Profile Avatar" class="profile-avatar">
        </div>
        <h1 id="displayName" class="profile-name" data-field="displayName"><%= profile.displayName %></h1>
        <p class="username">@<%= user.username %> <span class="online-indicator online">●</span></p>
      </div>

      <% if (typeof isViewer !== 'undefined' && isViewer) { %>
        <!-- Viewer controls when looking at someone else's profile -->
        <div class="viewer-controls">
          <button class="heart-button <% if (userHasLiked) { %>active<% } %>" data-username="<%= user.username %>">
            ❤️ <span class="heart-count"><%= hearts %></span>
          </button>
          
          <!-- Add other viewer controls like follow button -->
          <button class="follow-btn" data-username="<%= user.username %>">Follow</button>
        </div>
        
        <!-- Remove edit buttons when viewing someone else's profile -->
        <style>
          .edit-btn { display: none; }
        </style>
      <% } %>
      
      <div class="profile-section">
        <h3><svg class="icon"><use xlink:href="/images/woodland-icons.svg#tree"></use></svg> Woodland Home</h3>
        <p id="woodland" data-field="woodland"><%= profile.woodland %></p>
        <button class="edit-btn" data-target="woodland">Edit</button>
      </div>
      
      <div class="profile-section">
        <h3><svg class="icon"><use xlink:href="/images/woodland-icons.svg#leaf"></use></svg> My Story</h3>
        <p id="bio" data-field="bio"><%= profile.bio %></p>
        <button class="edit-btn" data-target="bio">Edit</button>
      </div>
      
      <div class="profile-section">
        <h3><svg class="icon"><use xlink:href="/images/woodland-icons.svg#sun"></use></svg> Favorite Seasons</h3>
        <div id="favoriteSeasons" class="seasons-container">
          <% profile.favoriteSeasons.forEach(season => { %>
            <span class="season-tag"><%= season %></span>
          <% }) %>
        </div>
        <button class="edit-btn" data-target="favoriteSeasons">Edit</button>
      </div>
      
      <div class="profile-section">
        <h3><svg class="icon"><use xlink:href="/images/woodland-icons.svg#butterfly"></use></svg> Forest Friends</h3>
        <div id="friends" class="friends-container">
          <% if (friendProfiles && friendProfiles.length > 0) { %>
            <% friendProfiles.forEach(friend => { %>
              <div class="friend-chip">
                <%= friend.displayName %>
                <span class="online-indicator <%= onlineUsers.includes(friend.userId.toString()) ? 'online' : 'offline' %>">●</span>
              </div>
            <% }) %>
          <% } else { %>
            <p>No forest friends yet. Explore the woodland to find some!</p>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <div id="edit-modal" class="modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h3>Edit <span id="editing-field-name"></span></h3>
      <div id="edit-field-container"></div>
      <button id="save-changes-btn">Save Changes</button>
    </div>
  </div>
  
  <div id="notification-modal" class="modal">
    <div class="modal-content">
      <span class="close-notification-modal">&times;</span>
      <h3>Woodland Notifications</h3>
      <div id="notification-container"></div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/profile.js"></script>
  <!-- Add this script before the closing </body> tag -->

<% if (typeof isViewer !== 'undefined' && isViewer) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Heart button functionality for viewer mode
      const heartButton = document.querySelector('.heart-button');
      if (heartButton) {
        heartButton.addEventListener('click', async function() {
          const username = this.dataset.username;
          
          try {
            const response = await fetch(`/bambis/api/heart/${username}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            const data = await response.json();
            if (data.success) {
              // Update UI
              this.classList.toggle('active', data.hearted);
              
              const heartCount = document.querySelector('.heart-count');
              heartCount.textContent = data.heartCount;
              
              // Emit socket event for real-time updates
              socket.emit('profile:heart', {
                username: username,
                count: data.heartCount,
                hearted: data.hearted
              });
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      }
      
      // Follow button functionality
      const followBtn = document.querySelector('.follow-btn');
      if (followBtn) {
        followBtn.addEventListener('click', async function() {
          const username = this.dataset.username;
          
          try {
            const response = await fetch(`/bambis/api/follow/${username}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            const data = await response.json();
            if (data.success) {
              this.textContent = data.following ? 'Unfollow' : 'Follow';
              
              // Show notification
              const notificationArea = document.getElementById('notification-area');
              if (notificationArea) {
                notificationArea.style.display = 'block';
                const notification = document.createElement('div');
                notification.className = 'notification';
                notification.textContent = data.message;
                notificationArea.appendChild(notification);
                
                // Remove notification after animation completes
                setTimeout(() => {
                  notification.remove();
                  if (notificationArea.children.length === 0) {
                    notificationArea.style.display = 'none';
                  }
                }, 4000);
              }
            }
          } catch (error) {
            console.error('Error:', error);
          }
        });
      }
    });
  </script>
  <% } %>
</body>
</html>